{
    "figura.backend.connected": "服务器已连接！",
    "figura.backend.disconnected": "服务器连接已断开！",
    "figura.backend.user_not_found": "未找到用户",
    "figura.backend.avatar_not_found": "未找到模型",
    "figura.backend.upload_success": "模型上传成功！",
    "figura.backend.upload_too_big": "模型过大",
    "figura.backend.upload_too_many": "你已有太多模型",
    "figura.backend.upload_error": "上传模型时错误",
    "figura.backend.delete_success": "模型已删除！",
    "figura.backend.delete_error": "删除模型时出错",
    "figura.backend.equip_error": "设置模型时出错",
    "figura.backend.warning": "警告",
    "figura.backend.ping_size": "延迟过大",
    "figura.backend.ping_rate": "发送请求过多",
    "figura.toast.reload": "模型已重新加载！",
    "figura.toast.reload_all": "所有模型已重新加载！",
    "figura.toast.panic_enabled": "紧急模式已启用！",
    "figura.toast.panic_disabled": "紧急模式已禁用！",
    "figura.toast.clipboard": "已复制到剪贴板！",
    "figura.toast.new_version": "新版本可用！",
    "figura.toast.avatar_wizard.error": "创建模型失败！",
    "figura.toast.avatar_wizard.success": "模型已创建！",
    "figura.toast.load_error": "加载模型失败！",
    "figura.popup_menu.cancel": "取消",
    "figura.popup_menu.reload": "重新加载外观",
    "figura.badges.system.default": "Figura标志！",
    "figura.badges.system.warning": "这个外观是为新版本制作，兼容性可能不佳！",
    "figura.badges.system.error": "这个外观脚本有错误！",
    "figura.badges.pride.agender": "Figura无性别者标志！",
    "figura.badges.pride.aroace": "Figura无性恋且浪漫取向者标志！",
    "figura.badges.pride.aromantic": "Figura浪漫取向者标志！",
    "figura.badges.pride.asexual": "Figura无性恋者标志！",
    "figura.badges.pride.bigender": "Figura双性恋者标志！",
    "figura.badges.pride.bisexual": "Figura双性者标志！",
    "figura.badges.pride.demiboy": "Figura半男者标志！",
    "figura.badges.pride.demigender": "Figura半性别者标志！",
    "figura.badges.pride.demigirl": "Figura半女者标志！",
    "figura.badges.pride.demiromantic": "Figura 半浪漫者标志！",
    "figura.badges.pride.demisexual": "Figura 半性恋者标志！",
    "figura.badges.pride.disability": "Figura残疾者标志！",
    "figura.badges.pride.finsexual": "Figura被女性吸引者标志！",
    "figura.badges.pride.gaymen": "Figura男同性恋者标志！",
    "figura.badges.pride.genderfae": "Figura非男性者标志！",
    "figura.badges.pride.genderfluid": "Figura性别流体者标志！",
    "figura.badges.pride.genderqueer": "Figura性别酷儿者标志！",
    "figura.badges.pride.intersex": "Figura双性者标志！",
    "figura.badges.pride.lesbian": "Figura女同性恋者标志！",
    "figura.badges.pride.nonbinary": "Figura非二元性别者标志！",
    "figura.badges.pride.pansexual": "Figura泛性恋者标志！",
    "figura.badges.pride.plural": "Figura多元者标志！",
    "figura.badges.pride.polysexual": "Figura多性恋者标志！",
    "figura.badges.pride.pride": "Figura LGBTQ+者标志！",
    "figura.badges.pride.transgender": "Figura跨性别者标志！",
    "figura.badges.special.translator": "Figura模组译者！",
    "figura.badges.special.donator": "感谢您支持Figura模组！",
    "figura.badges.special.contest": "Figura 竞赛获胜者！GG！",
    "figura.badges.special.discord_staff": "正式Figura Discord员工！",
    "figura.badges.special.dev": "Figura开发者！",
    "figura.gui.on": "开启",
    "figura.gui.off": "关闭",
    "figura.gui.create": "新建",
    "figura.gui.name": "名字",
    "figura.gui.authors": "作者",
    "figura.gui.size": "大小",
    "figura.gui.complexity": "模型复杂度",
    "figura.gui.done": "完成",
    "figura.gui.cancel": "取消",
    "figura.gui.expand": "最大化",
    "figura.gui.minimise": "最小化",
    "figura.gui.reset_all": "重置所有",
    "figura.gui.text_hint.any": "文字",
    "figura.gui.text_hint.int": "整数",
    "figura.gui.text_hint.positive_int": "正整数",
    "figura.gui.text_hint.float": "数字",
    "figura.gui.text_hint.hex_color": "颜色",
    "figura.gui.text_hint.folder_path": "文件路径",
    "figura.gui.text_hint.ip": "IP地址",
    "figura.gui.text_hint.search": "搜索",
    "figura.gui.text_hint.name": "名字/UUID",
    "figura.gui.error.no_avatar": "你未选择外观！",
    "figura.gui.error.no_keybinds": "模型没有提供绑定键！",
    "figura.gui.error.no_sounds": "模型没有自定义声音！",
    "figura.gui.error.no_wheel_page": "轮盘没有任何有效动作！",
    "figura.gui.context.reload": "重载模型",
    "figura.gui.context.copy_name": "复制名字",
    "figura.gui.context.copy_uuid": "复制UUID",
    "figura.gui.context.copy_path": "复制路径",
    "figura.gui.context.open_folder": "打开文件夹",
    "figura.gui.panels.title.profile": "个人资料",
    "figura.gui.panels.title.browser": "浏览",
    "figura.gui.panels.title.wardrobe": "衣柜",
    "figura.gui.panels.title.settings": "设置",
    "figura.gui.panels.title.sound": "模型声音",
    "figura.gui.panels.title.keybind": "模型绑定键",
    "figura.gui.panels.title.avatar": "模型预览",
    "figura.gui.wardrobe.expand_wardrobe.tooltip": "展开衣柜列表",
    "figura.gui.wardrobe.minimize_wardrobe.tooltip": "收起衣柜列表",
    "figura.gui.wardrobe.upload.tooltip": "上传模型到Figura服务器\n其他玩家只会以你上传的模型看到你",
    "figura.gui.wardrobe.reload.tooltip": "从Figura服务器重载外观",
    "figura.gui.wardrobe.delete.tooltip": "从Figura服务器删除外观",
    "figura.gui.wardrobe.sound.tooltip": "模型声音",
    "figura.gui.wardrobe.keybind.tooltip": "模型绑定键",
    "figura.gui.wardrobe.new_avatar.tooltip": "创建新模型",
    "figura.gui.wardrobe.unselect.tooltip": "取消选择目前模型",
    "figura.gui.wardrobe.folder.tooltip": "打开模型根文件夹",
    "figura.gui.sound.play": "播放声音",
    "figura.gui.sound.stop": "停止声音",
    "figura.gui.load_error": "加载时出错",
    "figura.gui.status.reason": "原因",
    "figura.gui.status.size": "大小",
    "figura.gui.status.size.0": "无",
    "figura.gui.status.size.1": "模型大小超出最大限制%s",
    "figura.gui.status.size.2": "模型大小超出最大限制%s的75%%",
    "figura.gui.status.size.3": "正常",
    "figura.gui.status.texture": "纹理",
    "figura.gui.status.texture.0": "无",
    "figura.gui.status.texture.3": "正常",
    "figura.gui.status.script": "脚本",
    "figura.gui.status.script.0": "无",
    "figura.gui.status.script.1": "外观脚本出错",
    "figura.gui.status.script.2": "外观脚本需要新版本的Figura",
    "figura.gui.status.script.3": "正常",
    "figura.gui.status.backend": "后台服务器",
    "figura.gui.status.backend.1": "连接已断开",
    "figura.gui.status.backend.2": "正在连接中",
    "figura.gui.status.backend.3": "已连接",
    "figura.gui.avatar_wizard.meta": "模型数据设置",
    "figura.gui.avatar_wizard.name": "名称",
    "figura.gui.avatar_wizard.authors": "作者",
    "figura.gui.avatar_wizard.model": "模型",
    "figura.gui.avatar_wizard.dummy_model": "包含模型",
    "figura.gui.avatar_wizard.slim": "更瘦的（Alex）胳膊",
    "figura.gui.avatar_wizard.cape": "披风模板",
    "figura.gui.avatar_wizard.elytra": "鞘翅模板",
    "figura.gui.avatar_wizard.pivots": "Pivot中心点",
    "figura.gui.avatar_wizard.items_pivot": "手持物品的Pivot中心点",
    "figura.gui.avatar_wizard.spyglass_pivot": "望远镜的Pivot中心点",
    "figura.gui.avatar_wizard.helmet_item_pivot": "头戴物品的Pivot中心点",
    "figura.gui.avatar_wizard.parrots_pivot": "鹦鹉的Pivot中心点",
    "figura.gui.avatar_wizard.scripting": "脚本",
    "figura.gui.avatar_wizard.dummy_script": "包含脚本",
    "figura.gui.avatar_wizard.hide_player": "隐藏原版玩家模型",
    "figura.gui.avatar_wizard.hide_armor": "隐藏原版盔甲",
    "figura.gui.avatar_wizard.hide_cape": "隐藏原版披风",
    "figura.gui.avatar_wizard.hide_elytra": "隐藏原版鞘翅",
    "figura.gui.avatar_wizard.empty_events": "包含测试事件",
    "figura.config.nameplate": "玩家名称显示",
    "figura.config.nameplate.tooltip": "玩家名称标签（悬浮在玩家头顶的名称）显示设置",
    "figura.config.self_nameplate": "开启自己的名称标签显示",
    "figura.config.self_nameplate.tooltip": "开/关你自己名称标签的渲染",
    "figura.config.preview_nameplate": "GUI内显示名称标签",
    "figura.config.preview_nameplate.tooltip": "开/关GUI内预览时名称标签的渲染",
    "figura.config.chat_nameplate": "自定义聊天栏名称",
    "figura.config.chat_nameplate.tooltip": "设置在聊天栏内名称自定义的等级",
    "figura.config.entity_nameplate": "自定义实体名称",
    "figura.config.entity_nameplate.tooltip": "设置实体名称自定义的等级",
    "figura.config.list_nameplate": "自定义Tab列表名称",
    "figura.config.list_nameplate.tooltip": "设置Tab列表名称自定义的等级",
    "figura.config.nameplate_level.1": "无",
    "figura.config.nameplate_level.2": "脚本",
    "figura.config.nameplate_level.3": "脚本 + 徽章",
    "figura.config.script": "脚本",
    "figura.config.script.tooltip": "脚本设置",
    "figura.config.log_location": "print输出位置",
    "figura.config.log_location.tooltip": "脚本print指令输出位置",
    "figura.config.log_location.1": "聊天栏",
    "figura.config.log_location.2": "日志",
    "figura.config.allow_fp_hands": "第一人称头",
    "figura.config.allow_fp_hands.tooltip": "开/关脚本可否移动，旋转，或缩放第一人称头",
    "figura.config.log_number_length": "Print指令数字长度",
    "figura.config.log_number_length.tooltip": "改变print指令时显示的小数长度",
    "figura.config.format_script": "脚本格式",
    "figura.config.format_script.tooltip.1": "选择脚本是否要被压缩并移除注释，空格和/或空行",
    "figura.config.format_script.tooltip.2": "需要重新选择形象以生效",
    "figura.config.format_script.1": "关闭",
    "figura.config.format_script.2": "轻度",
    "figura.config.format_script.3": "重度",
    "figura.config.action_wheel_button": "轮盘按键",
    "figura.config.action_wheel_button.tooltip": "开启轮盘的按键",
    "figura.config.action_wheel_mode": "轮盘模式",
    "figura.config.action_wheel_mode.tooltip": "改变轮盘开启和互动的方式",
    "figura.config.action_wheel_mode.1": "按住",
    "figura.config.action_wheel_mode.2": "切换",
    "figura.config.action_wheel_mode.3": "按住（松开时执行动作）",
    "figura.config.action_wheel_mode.4": "切换（松开时执行动作）",
    "figura.config.action_wheel_scale": "轮盘大小",
    "figura.config.action_wheel_scale.tooltip": "改变轮盘的大小",
    "figura.config.action_wheel_title": "被选择动作的名字位置",
    "figura.config.action_wheel_title.tooltip": "改变被选择动作的文本名字显示位置",
    "figura.config.action_wheel_title.1": "鼠标（工具提示）",
    "figura.config.action_wheel_title.2": "鼠标",
    "figura.config.action_wheel_title.3": "顶部",
    "figura.config.action_wheel_title.4": "中间",
    "figura.config.action_wheel_title.5": "底部",
    "figura.config.action_wheel_decorations": "物品装饰",
    "figura.config.action_wheel_decorations.tooltip": "开/关物品装饰的渲染，例如伤害栏和物品数量",
    "figura.config.ui": "UI设置",
    "figura.config.ui.tooltip": "UI设置",
    "figura.config.background_scroll_speed": "背景滚动速度",
    "figura.config.background_scroll_speed.tooltip": "背景动画的滚动速度",
    "figura.config.popup_scale": "玩家弹出大小",
    "figura.config.popup_scale.tooltip": "玩家弹出大小",
    "figura.config.popup_min_size": "玩家弹出最小尺寸",
    "figura.config.popup_min_size.tooltip": "当你远离玩家时，玩家弹出的最大尺寸",
    "figura.config.popup_max_size": "玩家弹出最小尺寸",
    "figura.config.popup_max_size.tooltip": "当你远离玩家时，玩家弹出的最大尺寸",
    "figura.config.figura_inventory": "Figura物品栏",
    "figura.config.figura_inventory.tooltip": "开/关物品栏的原版或Figura的paperdoll渲染",
    "figura.config.toast_time": "消息框长度",
    "figura.config.toast_time.tooltip": "更改Figura消息框待在屏幕上的时间（秒）",
    "figura.config.toast_title_time": "长消息框文本切换",
    "figura.config.toast_title_time.tooltip": "更改Figura长消息框切换题目和文本内容的时间（秒）",
    "figura.config.wardrobe_file_names": "衣柜文件名",
    "figura.config.wardrobe_file_names.tooltip": "更改衣柜的外观显示，使它们使用文件名而不是metadata名字",
    "figura.config.paperdoll": "Paperdoll",
    "figura.config.paperdoll.tooltip": "Paperdoll设置",
    "figura.config.has_paperdoll": "开启paperdoll",
    "figura.config.has_paperdoll.tooltip": "开/关paperdoll渲染",
    "figura.config.paperdoll_always_on": "总是开启",
    "figura.config.paperdoll_always_on.tooltip": "开/关paperdoll是否总是渲染或者只是使用动作时",
    "figura.config.first_person_paperdoll": "只限第一人称",
    "figura.config.first_person_paperdoll.tooltip": "开/关paperdoll是否只在第一人称时渲染",
    "figura.config.paperdoll_scale": "Paperdoll大小",
    "figura.config.paperdoll_scale.tooltip": "更改paperdoll大小",
    "figura.config.paperdoll_x": "Paperdoll X",
    "figura.config.paperdoll_x.tooltip": "更改paperdoll的X位置",
    "figura.config.paperdoll_y": "Paperdoll Y",
    "figura.config.paperdoll_y.tooltip": "更改paperdoll的Y位置",
    "figura.config.paperdoll_pitch": "Paperdoll倾斜度",
    "figura.config.paperdoll_pitch.tooltip": "更改paperdoll的倾斜度",
    "figura.config.paperdoll_yaw": "Paperdoll偏转度",
    "figura.config.paperdoll_yaw.tooltip": "更改paperdoll的偏转度",
    "figura.config.misc": "其他",
    "figura.config.misc.tooltip": "未整理/不相关设置",
    "figura.config.popup_button": "弹出菜单",
    "figura.config.popup_button.tooltip": "用来开启针对用户的快速操作的弹出菜单的按钮",
    "figura.config.reload_button": "重载形象",
    "figura.config.reload_button.tooltip": "用来重新加载目前形象的按钮",
    "figura.config.panic_button": "紧急按钮",
    "figura.config.panic_button.tooltip": "停止所有角色的渲染",
    "figura.config.wardrobe_button": "衣柜按钮",
    "figura.config.wardrobe_button.tooltip": "开启Figura的衣柜菜单",
    "figura.config.button_location": "菜单按钮位置",
    "figura.config.button_location.tooltip": "Figura按钮的位置",
    "figura.config.button_location.1": "图标",
    "figura.config.button_location.2": "左上",
    "figura.config.button_location.3": "右上",
    "figura.config.button_location.4": "左下",
    "figura.config.button_location.5": "右下",
    "figura.config.update_channel": "更新类型",
    "figura.config.update_channel.tooltip": "寻找新版本时搜索的版本类型",
    "figura.config.update_channel.1": "无",
    "figura.config.update_channel.2": "正式版（稳定）",
    "figura.config.update_channel.3": "快照（不稳定）",
    "figura.config.easter_eggs": "开启彩蛋",
    "figura.config.easter_eggs.tooltip": "开启一些有趣，无法预料的Figura功能（无趣！doge）",
    "figura.config.dev": "Dev",
    "figura.config.dev.tooltip": "开发者/测试用设置",
    "figura.config.connection_toasts": "后台服务器连接消息框",
    "figura.config.connection_toasts.tooltip": "开/关游戏是否显示后台服务器连接情况的消息框",
    "figura.config.render_debug_parts_pivot": "轴心支点渲染",
    "figura.config.render_debug_parts_pivot.tooltip": "当碰撞箱调试显示时，从 %d 和 %d 渲染轴心支点",
    "figura.config.render_debug_parts_pivot.tooltip.cubes": "方块",
    "figura.config.render_debug_parts_pivot.tooltip.groups": "组",
    "figura.config.render_debug_parts_pivot.1": "关闭",
    "figura.config.render_debug_parts_pivot.2": "只限可见",
    "figura.config.render_debug_parts_pivot.3": "所有",
    "figura.config.first_person_matrices": "第一人称Matrices",
    "figura.config.first_person_matrices.tooltip": "开/关model part matrices是否在第一人称下仍保持更新",
    "figura.config.log_others": "记录非主机脚本",
    "figura.config.log_others.tooltip": "允许调试非主机脚本的记录和错误",
    "figura.config.log_pings": "pings数据记录",
    "figura.config.log_pings.tooltip": "选择是否记录pings数据",
    "figura.config.log_pings.1": "关闭",
    "figura.config.log_pings.2": "聊天栏",
    "figura.config.log_pings.3": "日志",
    "figura.config.sync_pings": "同步Pings",
    "figura.config.sync_pings.tooltip.1": "开/关主机pings是否在本地运行或从后台服务器接收",
    "figura.config.sync_pings.tooltip.2": "注意：假如打开，无与后台服务器的连接意味着你的pings不会运行！",
    "figura.config.chat_messages": "聊天栏信息",
    "figura.config.chat_messages.tooltip.1": "开/关脚本可否自动改变/发送信息",
    "figura.config.chat_messages.tooltip.2": "这是一个危险的选项，因为消息仍会被登记为是你发出的",
    "figura.config.chat_messages.tooltip.3": "Figura不负责这个功能带来的任何风险",
    "figura.config.main_dir": "Figura文件夹位置",
    "figura.config.main_dir.tooltip": "更改Figura文件夹的位置",
    "figura.config.server_ip": "Figura服务器IP",
    "figura.config.server_ip.tooltip": "设置用于Figura的多人功能的服务器IP",
    "figura.command.click_to_open": "点击此处以打开",
    "figura.command.load.loading": "正在加载模型！",
    "figura.command.load.invalid": "无效路径 \"%s\"",
    "figura.command.docs_export.success": "已导出Figura文档到Figura文件夹",
    "figura.command.docs_export.error": "导出Figura文档时失败！",
    "figura.command.docs_type_hover": "点击以展示 %s 文档",
    "figura.command.debug.success": "已保存调试数据到Figura文件夹",
    "figura.command.debug.error": "保存调试数据时出错！",
    "figura.toast.avatar_data_clear": "已清除模型数据!",
    "figura.permissions.value.init_inst": "初始化命令数量",
    "figura.permissions.category.low": "低",
    "figura.permissions.category.default.info": "中等权限\n大部分特性启用,但一些重要特性仍被禁用\n允许模型修改原版模型，但是不允许修改玩家名称标签\n适合一般公共模型",
    "figura.permissions.category.high": "高",
    "figura.toast.wardrobe_copy.error": "复制文件时出错!",
    "figura.permissions.infinity": "无限制",
    "figura.toast.cache_clear": "已清除缓存!",
    "figura.permissions.category.max": "完全",
    "figura.permissions.disabled": "禁用",
    "figura.permissions.category.blocked.info": "无权限\n所有Figura模组功能在此模型中均被禁用\n就像没有模型那样",
    "figura.permissions.category.low.info": "低权限\n大部分特性已被禁用\n适合特别简单的模型",
    "figura.permissions.enabled": "启用",
    "figura.permissions.category.high.info": "高权限\n除了脚本相关功能被限制，其他所有功能均被启用\n适合复杂模型",
    "figura.toast.wardrobe_copy.success": "已复制 %s 个文件!",
    "figura.toast.permission_change": "权限变更为",
    "figura.permissions.category.max.info": "完全权限\n所有特性都被启用\n模型将可以利用所有设备资源\n适合极其复杂的模型",
    "figura.permissions.category.blocked": "被阻止",
    "figura.permissions.category.default": "默认",
    "figura.permissions.value.world_tick_inst": "世界刻命令数量",
    "figura.permissions.value.volume.tooltip": "更改此模型发出的声音的音量",
    "figura.permissions.value.bb_animations": "最大动画复杂度",
    "figura.permissions.value.world_tick_inst.tooltip": "在每个世界刻中可被执行的命令的最大数量",
    "figura.permissions.value.texture_size": "最大额外纹理大小",
    "figura.permissions.value.tick_inst.tooltip": "在每刻中可被执行的命令的最大数量",
    "figura.permissions.value.init_inst.tooltip": "脚本在初始化阶段中可用的代码指令数量",
    "figura.ellipsis": "…",
    "figura.permissions.value.world_render_inst": "世界渲染命令数量",
    "figura.permissions.value.complexity": "最大复杂度",
    "figura.permissions.value.sounds": "最大声音事件频率",
    "figura.permissions.value.tick_inst": "刻命令数量",
    "figura.permissions.value.bb_animations.tooltip": "这个模型的最大动画复杂度\n每个正在播放的动画占用1动画复杂度，不在播放的动画不被计算\n例如，如果模型正在同时播放两个动画，会被记作2动画复杂度",
    "figura.permissions.value.animation_inst": "最大动画命令数量",
    "figura.permissions.value.world_render_inst.tooltip": "在世界渲染事件中可被执行的命令的最大数量",
    "figura.permissions.value.volume": "模型音量",
    "figura.permissions.value.animation_inst.tooltip": "动画代码事件或关键帧期间，允许的命令最大数量",
    "figura.permissions.value.render_inst": "渲染命令数量",
    "figura.permissions.value.render_inst.tooltip": "在渲染事件中可被执行的命令的最大数量",
    "figura.permissions.value.complexity.tooltip": "这个模型的最大复杂度\n复杂度的计算方法为每个面算作1复杂度\n因此一个正方体有6复杂度\n隐藏的部分不会被计算",
    "figura.permissions.value.particles": "最大粒子生成频率",
    "figura.permissions.value.particles.tooltip": "模型每秒可以生成的粒子的最大数量",
    "figura.permissions.value.sounds.tooltip": "模型每秒最多发出的声音事件的数量",
    "figura.config.nameplate_render.1.tooltip": "名称标签渲染规则与原版相同",
    "figura.permissions.value.nameplate_edit.tooltip": "控制模型更改玩家名称标签的权限，例如更改名称标签显示的内容、位置，或是不渲染名称标签",
    "figura.permissions.value.cancel_sounds": "取消声音权限",
    "figura.permissions.value.cancel_sounds.tooltip": "控制模型是否可以在ON_PLAY_SOUND事件中令任一正在播放的声音停止播放",
    "figura.permissions.value.custom_render_layer": "额外渲染层",
    "figura.permissions.value.custom_render_layer.tooltip": "允许模型创建自己的渲染层，使模型GLSL代码（着色器）生效",
    "figura.permissions.value.custom_sounds": "自定义声音",
    "figura.permissions.value.custom_sounds.tooltip": "允许模型播放来自模型文件的自定义声音",
    "figura.permissions.value.custom_skull": "玩家头颅覆盖",
    "figura.permissions.value.custom_skull.tooltip": "使得玩家头颅被渲染为模型的头颅，而非原版头颅",
    "figura.permissions.value.buffer_size": "缓冲区大小",
    "figura.permissions.value.buffers_count": "缓冲区数量",
    "figura.permissions.value.buffers_count.tooltip": "此模型可以创建的最大缓冲区数量",
    "figura.permissions.value.networking": "网络权限",
    "figura.permissions.value.networking.tooltip": "允许这个模型使用网络相关功能",
    "figura.permissions.value.max_sockets_count": "Sockets最大数量",
    "figura.permissions.value.max_sockets_count.tooltip": "模型可以打开的Sockets的最大数量",
    "figura.popup_menu.decrease_permissions": "降低模型权限",
    "figura.popup_menu.increase_permissions": "提高模型权限",
    "figura.badges.special.immortalized": "不朽的Figura模型！",
    "figura.badges.no_permissions.complexity": "脚本超出了复杂度限制",
    "figura.badges.no_permissions.bb_animations": "模型超出动画复杂度限制",
    "figura.badges.no_permissions.texture_size": "模型超出额外纹理大小限制",
    "figura.badges.no_permissions.particles": "超出最大粒子数量限制",
    "figura.badges.no_permissions.cancel_sounds": "模型无权取消播放声音",
    "figura.badges.no_permissions.custom_sounds": "模型自定义声音未开启",
    "figura.badges.no_permissions.vanilla_model_edit": "模型未被允许覆盖原版玩家模型",
    "figura.badges.system.permissions": "这个模型可能需要更高的模型权限以正常工作！",
    "figura.badges.no_permissions.nameplate_edit": "模型未被允许修改玩家名称标签",
    "figura.emoji.face_angry": "生气",
    "figura.emoji.face_biba": "奶茶",
    "figura.emoji.face_fear": "害怕",
    "figura.emoji.face_happy": "开心",
    "figura.emoji.face_nervous": "紧张",
    "figura.emoji.face_sad": "伤心",
    "figura.emoji.face_silly": "笨笨脸",
    "figura.emoji.animal": "动物",
    "figura.emoji.food": "食物",
    "figura.emoji.hand": "手",
    "figura.emoji.heart": "心",
    "figura.emoji.nature": "自然",
    "figura.emoji.animated": "有动画",
    "figura.emoji.symbol": "符号",
    "figura.emoji.object": "物件",
    "figura.emoji.misc": "杂项",
    "figura.emoji.face_misc": "其他面容",
    "figura.emoji.portrait": "肖像",
    "figura.emoji.pride": "自豪",
    "figura.emoji.reference": "参考",
    "figura.emoji.meme": "meme",
    "figura.emoji.reference_bloons": "气球参考",
    "figura.emoji.reference_logo": "logo参考",
    "figura.emoji.reference_retro": "怀旧参考",
    "figura.gui.panic": "紧急模式已启用！Figura模组的所有功能已被禁用\n按下[%s]键来开关紧急模式",
    "figura.gui.avatar_settings.tooltip": "模型设置",
    "figura.gui.duplicate_keybind": "按键绑定冲突，这个按键也被用来：\n%s",
    "figura.gui.favorited": "收藏",
    "figura.gui.new_version.tooltip": "发现Figura模组更新！%s\n点击以打开浏览器下载页！",
    "figura.gui.old_version.tooltip": "你是一位从旧时代穿越而来的人吗？现在的最新版本已经是%s啦",
    "figura.gui.clear": "清除",
    "figura.gui.not_available_yet": "暂不可用",
    "figura.gui.text_hint.positive_float": "正数",
    "figura.gui.context.favorite.add": "加入收藏夹",
    "figura.gui.context.favorite.remove": "移出收藏夹",
    "figura.gui.context.set_permissions": "设置模型权限",
    "figura.gui.panels.title.permissions": "模型权限",
    "figura.gui.panels.title.help": "帮助",
    "figura.gui.panels.title.docs": "Lua脚本使用文档",
    "figura.gui.wardrobe.drop_files": "你想要将以下文件复制到你的衣橱吗？",
    "figura.gui.permissions.precise": "精确调整",
    "figura.gui.permissions.minimize_permissions.tooltip": "收起高级设置",
    "figura.gui.permissions.figura_only.tooltip": "只显示Figura玩家",
    "figura.gui.permissions.disconnected.tooltip": "显示已断开连接的Avatar",
    "figura.gui.permissions.size": "模型大小",
    "figura.gui.permissions.complexity": "模型复杂度",
    "figura.gui.permissions.init": "模型初始化脚本",
    "figura.gui.permissions.init.root": "来自：%s",
    "figura.gui.permissions.init.entity": "实体：%s",
    "figura.gui.permissions.tick": "刻脚本",
    "figura.gui.permissions.tick.world": "世界刻：%s",
    "figura.gui.permissions.tick.entity": "实体刻：%s",
    "figura.gui.permissions.render": "渲染脚本",
    "figura.gui.permissions.render.world": "世界渲染：%s",
    "figura.gui.permissions.render.entity": "实体渲染：%s",
    "figura.gui.permissions.render.post_entity": "前实体渲染：%s",
    "figura.gui.permissions.render.animations": "动画渲染：%s",
    "figura.gui.load_error.unknown": "未知错误",
    "figura.gui.load_error.scripts": "无效的脚本",
    "figura.gui.load_error.sounds": "无效的自定义声音",
    "figura.gui.load_error.models": "无效的模型",
    "figura.gui.load_error.metadata": "无效的描述文件\"avatar.json\"",
    "figura.gui.avatar_wizard.description": "描述",
    "figura.gui.avatar_wizard.armor_pivots": "盔甲的Pivot中心点",
    "figura.gui.network_filter.list.filter_mode.0": "完全匹配",
    "figura.gui.network_filter.list.filter_mode.1": "包含",
    "figura.gui.network_filter.list.filter_mode.1.tooltip": "完全包含此过滤器内条件的链接即可算作匹配",
    "figura.gui.network_filter.list.filter_mode.2": "以...开始",
    "figura.gui.network_filter.list.filter_mode.2.tooltip": "以此过滤器内条件开头的链接可算作匹配",
    "figura.gui.network_filter.list.filter_mode.3": "以...结尾",
    "figura.gui.network_filter.list.filter_mode.4": "RegEx",
    "figura.gui.network_filter.list.filter_mode.4.tooltip": "与过滤器中指定的 RegEx 模式匹配的链接可算作匹配",
    "figura.gui.network_filter.list.add_filter_entry": "添加新过滤器",
    "figura.gui.help.about": "关于...",
    "figura.gui.help.ingame_docs": "游戏内使用文档",
    "figura.gui.help.docs": "使用文档...",
    "figura.gui.help.external_wiki": "游戏外网页Wiki",
    "figura.gui.help.lua_version": "Lua版本：%s",
    "figura.gui.help.figura_version": "Figura版本：%s",
    "figura.config.nameplate_render": "名称标签渲染模式",
    "figura.config.nameplate_render.3": "从不渲染",
    "figura.config.nameplate_render.2": "视线追踪",
    "figura.config.nameplate_render.1": "原版",
    "figura.config.nameplate_render.tooltip": "更改实体名称标签的渲染模式",
    "figura.config.nameplate_render.3.tooltip": "从不渲染名称标签",
    "figura.config.sound_badge": "声音指示器",
    "figura.gui.permissions.reload_all": "重新加载全部内容",
    "figura.emoji.logo": "Logo",
    "figura.permissions.value.offscreen_rendering.tooltip": "控制模型是否应该在玩家不可见时被渲染，例如玩家背后的模型",
    "figura.permissions.value.vanilla_model_edit": "原版模型覆盖",
    "figura.gui.help.links": "相关链接...",
    "figura.permissions.value.offscreen_rendering": "屏幕外渲染",
    "figura.tab": "\t",
    "figura.badges.special.texture_artist": "Figura模组纹理作者！",
    "figura.popup_menu.permission_screen": "在模型权限页面中打开",
    "figura.gui.permissions.reset": "重置所有",
    "figura.gui.permissions.expand_permissions.tooltip": "展开高级设置",
    "figura.gui.permissions.disconnected": "（服务器未连接）",
    "figura.gui.action_wheel.slots_indicator": "槽位%s-%s 第%s页",
    "figura.gui.network_filter.list.filter_mode.3.tooltip": "以此过滤器内条件结尾的链接可算作匹配",
    "figura.config.nameplate_render.2.tooltip": "只有玩家正在看向的实体才会渲染名称标签",
    "figura.permissions.value.nameplate_edit": "更改玩家名称标签",
    "figura.permissions.value.vanilla_model_edit.tooltip": "允许模型控制原版玩家模型的内容，例如原版玩家、原版盔甲或是鞘翅的可见度",
    "figura.badges.no_permissions.sounds": "超出声音事件频率限制",
    "figura.gui.avatar_wizard.player_model": "玩家模型",
    "figura.permissions.value.texture_size.tooltip": "脚本生成的新纹理的最大大小\n模型预加载的材质不算在内",
    "figura.permissions.value.buffer_size.tooltip": "此模型的缓冲区的最大大小",
    "figura.badges.system.sound": "这个模型正在播放一个声音！",
    "figura.badges.no_permissions.init_inst": "脚本超出“初始化脚本数量”限制",
    "figura.gui.permissions.render.post_world": "前世界渲染：%s",
    "figura.gui.network_filter": "网络过滤器",
    "figura.gui.network_filter.list.filter_mode.0.tooltip": "只有完全等同于此过滤器的链接才可算作匹配",
    "figura.gui.help.lua_manual": "Lua使用手册",
    "figura.config.sound_badge.tooltip": "当模型在播放声音时，在名称标签上添加一个小标记\n需要开启徽章显示",
    "figura.config.format_script.1.tooltip": "无压缩",
    "figura.config.format_script.2.tooltip": "移除注释和不必要的空格",
    "figura.config.action_wheel_mode.1.tooltip": "按下时显示轮盘",
    "figura.config.action_wheel_mode.2.tooltip": "按下以切换轮盘可见性",
    "figura.config.nameplate_level.3.tooltip": "允许包含 Figura 提供的特殊徽章",
    "figura.config.format_script.4.tooltip": "将代码解析为语法树并重构为理论最优表示",
    "figura.config.iris_compatibility_fix": "光影包兼容性修复",
    "figura.config.iris_compatibility_fix.tooltip": "对光影包相关 mod 的兼容与修复\n未安装相关 mod 时无效",
    "figura.config.iris_compatibility_fix.1": "无",
    "figura.config.format_script.3.tooltip": "包含所有“轻度”特性；将所有代码压缩为一行",
    "figura.config.rendering.tooltip": "渲染设置",
    "figura.config.iris_compatibility_fix.1.tooltip": "不启用任何兼容性修复",
    "figura.config.action_wheel": "轮盘",
    "figura.config.action_wheel.tooltip": "轮盘设置",
    "figura.config.rendering": "渲染",
    "figura.config.log_location.2.tooltip": "客户端日志输出",
    "figura.config.nameplate_level.1.tooltip": "不会应用任何自定义",
    "figura.docs.action_wheel.new_action": "创建一个不会被自动分配到某一Page的新Action",
    "figura.docs.wheel_action.get_toggle_title": "获取该Action开启时的标题",
    "figura.docs.globals.world": "WorldAPI的全局实例和子类型",
    "figura.docs.enum.string_encodings": "有效字符串编码格式列表\n在`Buffers`中使用",
    "figura.docs.enum.player_model_parts": "有效玩家模型部件列表\n在`PlayerAPI`中使用",
    "figura.docs.enum.use_actions": "有效使用行为列表\n在`ItemStackAPI`中使用",
    "figura.docs.enum.render_modes": "有效渲染模式列表\n在`RENDER`事件中使用",
    "figura.docs": "“/figura docs”命令允许你查看Figura添加到其Lua环境中的所有函数和类型的文档",
    "figura.docs.text.type": "类型",
    "figura.docs.text.description": "描述",
    "figura.docs.text.function": "函数",
    "figura.docs.text.syntax": "语法",
    "figura.docs.text.returns": "返回值",
    "figura.docs.text.field": "域",
    "figura.docs.text.editable": "可编辑",
    "figura.docs.text.not_editable": "不可编辑",
    "figura.docs.text.entries": "条目",
    "figura.docs.text.aliases": "别名",
    "figura.docs.text.extends": "继承自",
    "figura.docs.enum": "包含其他函数所用的所有特定字面量字符串",
    "figura.docs.enum.empty": "这个枚举中没有任何值！你为什么会看到这个？",
    "figura.docs.enum.keybinds": "有效按键列表\n在`KeybindAPI`中使用",
    "figura.docs.enum.parent_types": "有效父类型列表\n在`ModelParts`中使用",
    "figura.docs.enum.render_types": "有效渲染类型列表\n在`ModelParts`中使用",
    "figura.docs.enum.texture_types": "有效纹理类型列表\n在`ModelParts`中使用",
    "figura.docs.enum.key_ids": "有效键绑定列表\n在`KeybindAPI`中使用",
    "figura.docs.enum.entity_poses": "有效实体姿势列表\n在`EntityAPI`中使用",
    "figura.docs.enum.item_display_modes": "有效物品显示模式列表\n在Item RenderTask中使用",
    "figura.docs.enum.post_effects": "有效后期效果列表\n在`RendererAPI`中使用",
    "figura.docs.enum.play_states": "有效播放状态列表\n在Blockbench Animations中使用",
    "figura.docs.enum.loop_modes": "有效循环模式列表\n在Blockbench Animations中使用",
    "figura.docs.enum.colors": "自定义颜色列表\n可用于任何能输入HEX颜色代码的地方",
    "figura.docs.avatar.get_name": "以字符串形式获取这个Avatar的名字",
    "figura.docs.enum.block_raycast_types": "有效方块路径追踪类型\n用于决定`raycast.block`如何处理方块",
    "figura.docs.enum.fluid_raycast_types": "有效流体路径追踪类型\n用于决定`raycast.block`如何处理流体",
    "figura.docs.enum.heightmap_types": "有效高度图类型列表\n用于决定`world.getHeight`返回哪种高度图中的最高点",
    "figura.docs.enum.registries": "有效注册项目类型\n用于在`client.getRegistry`中指定获取某一个注册表下已注册的项目",
    "figura.docs.globals": "Figura向Lua全局环境添加的各种东西的文档",
    "figura.docs.globals.vec": "“vectors.vec”的别名",
    "figura.docs.globals.require": "`require()`函数需要传入你的脚本名，不带`.lua`扩展名\n如果这个脚本之前没有被运行，那么它会被运行一次并返回脚本返回的值\n如果它已经被运行过，那么它就不会重复运行，而是返回与第一次相同的值\n如果被require的脚本没有返回值，那么`require()`会返回true\n如果你给出的脚本名不存在就会报错\n脚本文件可以通过`./`和`../`这样的相对路径访问",
    "figura.docs.globals.list_files": "返回包含指定路径中所有脚本名称的函数\n如果不指定路径，则从根文件夹获取\n第二个参数决定是否也列出子文件夹中的脚本名\n文件夹可以通过`./`和`../`这样的相对路径访问",
    "figura.docs.globals.type": "Figura覆写了Lua的`type()`函数\n当用在Figura的类型上时，返回类型的名字，与文档以及全局的`figuraMetatables`中看到的一样\n对具有`__type`键的元表的表调用时，返回相应的值",
    "figura.docs.globals.print": "将所有参数打印到聊天栏的函数\n虽然语法显示只能传入一个参数，但你可以传入任意数量的参数\n所有参数都会被打印，并以Tab分隔\n返回所有值的字符串形式",
    "figura.docs.globals.print_table": "第一个参数要么是`Table`，要么是`Userdata`，表示任意Figura添加的类型\n将表以特殊格式打印出来\n如果传入的是`Userdata`，它会被自动转换为表或字符串，然后显示出来\n对于表嵌套表的情况，`maxDepth`参数决定最多显示几层\n`maxDepth`默认值为1\n第三个参数`silent`会使得该函数不打印值，只返回表的字符串形式",
    "figura.docs.globals.print_json": "传入字符串形式的JSON作为参数，并将其不带任何前缀的打印到聊天栏\n虽然语法显示只能传入一个参数，但你可以传入任意数量的参数\n所有参数都会被打印，每一个都拼接在前一个之后\n返回格式化后的字符串",
    "figura.docs.globals.parse_json": "传入一个字符串形式的JSON，将其转化为Lua值\n对象和列表被相应的转换为表",
    "figura.docs.globals.to_json": "传入任意Lua值，将其转换为字符串形式的JSON\n不接受函数，它们将被视为NULL",
    "figura.docs.globals.action_wheel": "ActionWheelAPI的全局实例和子类型",
    "figura.docs.globals.animations": "AnimationsAPI的全局实例和子类型",
    "figura.docs.globals.figura_metatables": "包含所有Figura对象类型元表的表\n这些元表可编辑",
    "figura.docs.globals.nameplate": "NameplateAPI的全局实例和子类型",
    "figura.docs.globals.vanilla_model": "VanillaModelAPI的全局实例和子类型",
    "figura.docs.globals.models": "Avatar Models的全局实例和子类型",
    "figura.docs.globals.player": "EntityAPI的全局实例和子类型",
    "figura.docs.globals.events": "EventsAPI的全局实例和子类型",
    "figura.docs.globals.keybinds": "KeybindAPI的全局实例和子类型",
    "figura.docs.globals.vectors": "VectorsAPI的全局实例和子类型",
    "figura.docs.globals.matrices": "MatricesAPI的全局实例和子类型",
    "figura.docs.globals.particles": "ParticleAPI的全局实例",
    "figura.docs.globals.sounds": "SoundAPI的全局实例",
    "figura.docs.globals.client": "ClientAPI的全局实例",
    "figura.docs.globals.host": "HostAPI的全局实例",
    "figura.docs.globals.avatar": "AvatarAPI的全局实例",
    "figura.docs.globals.data": "DataAPI的全局实例",
    "figura.docs.globals.net": "NetworkingAPI的全局实例",
    "figura.docs.globals.json": "JsonAPI的全局实例",
    "figura.docs.globals.file": "FileAPI的全局实例",
    "figura.docs.globals.resources": "ResourcesAPI的全局实例",
    "figura.docs.globals.renderer": "RendererAPI的全局实例",
    "figura.docs.globals.user": "`player`的别名，以防你的Avatar的用户不是一名玩家",
    "figura.docs.globals.pings": "PingAPI的全局实例",
    "figura.docs.globals.textures": "TextureAPI的全局实例",
    "figura.docs.globals.config": "ConfigAPI的全局实例",
    "figura.docs.globals.raycast": "RaycastAPI的全局实例",
    "figura.docs.math": "包含Figura添加到默认Lua`math`库的函数",
    "figura.docs.math.player_scale": "玩家相对于世界的缩放比例常数\n（值为0.9375）",
    "figura.docs.math.world_scale": "世界相对于玩家的缩放比例常数\n（值为1.0666666667，如果需要更精确的值，使用`1/0.9375`，即`playerScale`的倒数）",
    "figura.docs.math.lerp": "从第一个参数线性插值到第二个参数，第三个参数为Delta\n对数字、同类向量和同类矩阵均有效",
    "figura.docs.math.clamp": "将给定值钳制在最小值和最大值之间",
    "figura.docs.math.round": "将给定值四舍五入到最近的整数",
    "figura.docs.math.map": "将给定值从一个范围映射到另一个范围\n例如：一个值为20，其范围在[0,200]，将其映射到[100,200]，结果将是110\n（最大值不必大于最小值，因此将[0,1]映射为[90,-90]也是可以的，尽管这看起来有些怪异）",
    "figura.docs.animation.set_offset": "设置动画开头多长时间的部分会被跳过\n这段时间每次循环都会被跳过\n（主要用于放置贝塞尔曲线的曲柄）",
    "figura.docs.math.short_angle": "返回两个角之间最小的角\n例如：你有一个350°的角，并且你想获取其与0°角的最小角，结果将是10°\n（返回的角是从第一个角的终边指向第二个角的终边的，具有方向且支持[0,360°]之外的角，例如`math.shortAngle(760,0)`的返回值为-40）",
    "figura.docs.math.lerp_angle": "类似于`lerp`函数，但角度限制为[0,360°]\n插值是沿着最小角进行的\n例如：从340°插值到20°，系数为0.75结果为10\n（超出[0,360°]值并不会报错，但很容易出现预料之外的情况）",
    "figura.docs.math.sign": "返回给定数字的符号\n正数对应1，负数对应-1，0对应0",
    "figura.docs.action_wheel": "用于自定义Avatar动作轮的全局API",
    "figura.docs.action_wheel.left_click": "左键按下时执行的函数",
    "figura.docs.action_wheel.right_click": "右键按下时执行的函数",
    "figura.docs.action_wheel.scroll": "滚轮滚动时执行的函数",
    "figura.docs.action_wheel.execute": "执行给定索引的Action\n如果索引是nil，将执行上一次选择的Action\n第二个参数可以指定执行左键还是右键的Action",
    "figura.docs.action_wheel.is_enabled": "返回当前动作轮是否被渲染",
    "figura.docs.action_wheel.get_selected": "返回当前选中Action的索引",
    "figura.docs.action_wheel.get_selected_action": "返回当前选中的Action",
    "figura.docs.action_wheel.new_page": "创建一个新Page\n可以给定一个标题以便于内部管理\n如果不给定标题，该函数也会返回一个Page",
    "figura.docs.action_wheel.set_page": "将动作轮的Page设置为给定Page或标题所对应的Page",
    "figura.docs.action_wheel.get_page": "从给定的标题返回一个储存的Page\n如果不传入标题，返回包含所有已注册Page的表",
    "figura.docs.action_wheel.get_current_page": "返回当前动作轮的Page，如果没有设定则为nil",
    "figura.docs.wheel_page": "用于存储最多8个Action的动作轮容器",
    "figura.docs.wheel_page.keep_slots": "这个Page的槽位是否应该在添加到动作轮时重置",
    "figura.docs.wheel_page.should_keep_slots": "获取这个Page的槽位是否会在添加到动作轮时重置",
    "figura.docs.wheel_page.set_keep_slots": "设置这个Page的槽位是否会在添加到动作轮时重置",
    "figura.docs.wheel_page.get_title": "返回这个Page的标题",
    "figura.docs.wheel_page.new_action": "在选中Page的索引处添加一个新Action\n如果不给定索引则添加至第一个可用的索引",
    "figura.docs.wheel_page.get_action": "从该Page的给定索引处获取一个Action",
    "figura.docs.wheel_page.set_action": "设置该Page给定索引处的Action\n如果索引是-1，Action会被设置在最后一个空索引",
    "figura.docs.wheel_page.get_slots_shift": "获取该Page当前的槽位偏移量\n该值是当前展示的槽位除以八再向上取整\n（可以理解为该Page的第几“页”，每一“页”最多八个Action，展示第九至十六个Action时此值为2，即第二“页”）",
    "figura.docs.wheel_page.set_slots_shift": "设置该Page当前的槽位偏移量\n该值是当前展示的槽位除以八再向上取整\n（可以理解为该Page的第几“页”，每一“页”最多八个Action，展示第九至十六个Action时此值为2，即第二“页”）",
    "figura.docs.wheel_page.get_actions": "获取给定偏移量下的Action的表\n如果不指定偏移量，则返回该Page下的所有Action\n注意，返回的表以Action的槽位数为索引，所以空的槽位会返回nil",
    "figura.docs.wheel_action": "Figura动作轮中的一个Action（动作）\nAction通过点击和滚轮滚动以交互，也可以变为可切换的",
    "figura.docs.wheel_action.left_click": "点击鼠标左键时执行的函数\n该函数有一个参数\n第一个参数是该Action本身",
    "figura.docs.wheel_action.right_click": "点击鼠标右键时执行的函数\n该函数有一个参数\n第一个参数是该Action本身",
    "figura.docs.wheel_action.toggle": "开关该Action时执行的函数\n该函数有一个参数\n第一个参数是该Action开关的状态\n第二个参数是该Action本身\n（如果同时设置了`untoggle`，则该函数仅在开启时执行）",
    "figura.docs.wheel_action.untoggle": "关闭该Action时执行的函数\n该函数有一个参数\n第一个参数是该Action开关的状态\n第二个参数是该Action本身",
    "figura.docs.wheel_action.scroll": "鼠标滚动时执行的函数\n该函数有一个参数\n第一个参数是滚轮滚动的方向\n第二个参数是该Action本身",
    "figura.docs.wheel_action.get_title": "获取该Action的标题",
    "figura.docs.wheel_action.set_title": "设置该Action的标题",
    "figura.docs.wheel_action.get_color": "获取该Action的颜色",
    "figura.docs.wheel_action.set_color": "设置该Action的颜色",
    "figura.docs.wheel_action.get_hover_color": "获取该Action的悬停颜色",
    "figura.docs.wheel_action.set_hover_color": "设置该Action的悬停颜色",
    "figura.docs.wheel_action.set_item": "设置该Action的图标物品",
    "figura.docs.wheel_action.set_hover_item": "设置该Action悬停时的图标物品",
    "figura.docs.wheel_action.set_texture": "设置在该Action中渲染的自定义纹理\n所有数值均以像素为单位\n默认UV为`(0,0)`，默认尺寸为纹理尺寸，默认缩放为1",
    "figura.docs.wheel_action.set_hover_texture": "设置悬停在该Action时渲染的自定义纹理\n所有数值均以像素为单位\n默认UV为`(0,0)`，默认尺寸为纹理尺寸，默认缩放为1",
    "figura.docs.wheel_action.set_on_left_click": "设置点击鼠标左键时执行的函数\n该函数有一个参数\n第一个参数是该Action本身",
    "figura.docs.wheel_action.set_on_right_click": "设置点击鼠标右键时执行的函数\n该函数有一个参数\n第一个参数是该Action本身",
    "figura.docs.wheel_action.set_on_toggle": "设置开关该Action时执行的函数\n该函数有一个参数\n第一个参数是该Action开关的状态\n第二个参数是该Action本身\n（如果同时设置了`untoggle`，则该函数仅在开启时执行）",
    "figura.docs.animation.get_start_delay": "获取该动画的启动延迟",
    "figura.docs.wheel_action.set_on_untoggle": "设置关闭该Action时执行的函数\n该函数有一个参数\n第一个参数是该Action开关的状态\n第二个参数是该Action本身",
    "figura.docs.wheel_action.set_on_scroll": "设置鼠标滚动时执行的函数\n该函数有一个参数\n第一个参数是滚轮滚动的方向\n第二个参数是该Action本身",
    "figura.docs.wheel_action.set_toggle_title": "设置该Action开启时的标题",
    "figura.docs.wheel_action.get_toggle_color": "获取该Action开启时的颜色",
    "figura.docs.wheel_action.set_toggle_color": "设置该Action开启时的颜色",
    "figura.docs.wheel_action.set_toggle_item": "获取该Action开启时的图标物品",
    "figura.docs.wheel_action.set_toggle_texture": "设置该Action开启时渲染的自定义纹理\n所有数值均以像素为单位\n默认UV为`(0,0)`，默认尺寸为纹理尺寸，默认缩放为1",
    "figura.docs.wheel_action.is_toggled": "检查该Action的开关状态",
    "figura.docs.wheel_action.set_toggled": "设置该Action的开关状态",
    "figura.docs.animations": "一个全局API，用于控制Blockbench动画",
    "figura.docs.animations.get_animations": "返回包含所有动画的表",
    "figura.docs.animations.stop_all": "终止所有正在播放和暂停的动画",
    "figura.docs.animation": "一个Blockbench动画",
    "figura.docs.animation.name": "这个动画的名字",
    "figura.docs.animation.play": "初始化动画\n如果被暂停则恢复播放",
    "figura.docs.animation.pause": "暂停动画的播放",
    "figura.docs.animation.stop": "终止动画",
    "figura.docs.animation.restart": "重新播放该动画\n如果已被终止则播放该动画\n这种行为也可以通过终止后再播放动画来重现",
    "figura.docs.animation.set_playing": "将`play`和`stop`合并在一起的函数\n接受一个布尔参数，如果为true，动画将被播放，如果为false，则动画会被终止",
    "figura.docs.animation.get_time": "获取该动画当前的播放时间",
    "figura.docs.animation.set_time": "设置该动画当前的播放时间",
    "figura.docs.animation.get_play_state": "获取该动画的播放状态",
    "figura.docs.animation.new_code": "在特定时间添加一个要运行的字符串代码\n如果该时间已经有要运行的代码，则覆写它",
    "figura.docs.animation.get_blend": "获取该动画的关键帧混合因子",
    "figura.docs.animation.set_blend": "设置该动画的关键帧混合因子",
    "figura.docs.animation.get_offset": "获取该动画的偏移时间",
    "figura.docs.animation.set_start_delay": "设置动画播放前的等待时间\n注意，在等待过程中，动画也被视为正在播放",
    "figura.docs.animation.get_loop_delay": "获取该动画的循环延迟",
    "figura.docs.animation.set_loop_delay": "设置动画循环的间隔（单位为秒）",
    "figura.docs.animation.get_length": "获取该动画的长度，单位为秒",
    "figura.docs.animation.set_length": "设置该动画的长度，单位为秒",
    "figura.docs.animation.set_override": "设置该动画是否应覆盖其所有部件的变换\n等效于同时调用`overrideRot`、`overridePos`和`overrideScale`",
    "figura.docs.animation.get_override_rot": "获取该动画是否能覆盖其部件的旋转",
    "figura.docs.animation.get_override_pos": "获取该动画是否能覆盖其部件的位置",
    "figura.docs.animation.get_override_scale": "获取该动画是否能覆盖其部件的缩放",
    "figura.docs.animation.set_override_rot": "设置该动画是否能覆盖其部件的旋转",
    "figura.docs.animation.set_override_pos": "设置该动画是否能覆盖其部件的位置",
    "figura.docs.animation.set_override_scale": "设置该动画是否能覆盖其部件的缩放",
    "figura.docs.animation.get_loop": "获取该动画的循环模式",
    "figura.docs.animation.set_loop": "设置该动画的循环模式",
    "figura.docs.animation.get_priority": "获取该动画的优先级",
    "figura.docs.animation.set_priority": "设置该动画的优先级\n低优先级动画被高优先级动画覆盖，而不是混合",
    "figura.docs.animation.get_speed": "获取该动画的速度",
    "figura.docs.animation.set_speed": "设置该动画的播放速度\n负值可用于反向播放动画",
    "figura.docs.animation.get_name": "返回该动画的名称",
    "figura.docs.avatar": "一个全局API，包含用于与Avatar的元数据交互以及获取当前脚本环境信息的函数",
    "figura.docs.avatar.store": "在你当前Avatar的元数据中存储给定的键值对\n别人的脚本可以通过`avatarVars`函数获取这些信息\n键必须是字符串",
    "figura.docs.avatar.get_uuid": "返回这个Avatar所有者的UUID",
    "figura.docs.avatar.get_current_instructions": "获取你的Avatar当前已执行的指令数\n在特定事件开始时重置为0",
    "figura.docs.avatar.get_color": "获取当前Avatar的颜色字符串，其用于Avatar主题色",
    "figura.docs.avatar.set_color": "设置当前Avatar的颜色字符串，其用于Avatar主题色，如果用户有一个特殊徽章，他可以传入这个徽章的名字来设置颜色",
    "figura.docs.avatar.get_badges": "以字符串形式获取用户的徽章",
    "figura.docs.avatar.get_version": "以字符串形式获取这个Avatar的版本",
    "figura.docs.avatar.get_authors": "以字符串形式获取这个Avatar的作者名称",
    "figura.docs.avatar.get_entity_name": "尝试获取这个Avatar的实体的名字，默认是这个Avatar的名字",
    "figura.docs.avatar.get_size": "获取这个Avatar的文件大小的字节数",
    "figura.docs.avatar.has_texture": "获取该Avatar是否有纹理",
    "figura.docs.avatar.has_script_error": "获取该脚本是否因为错误而停止（有用吗？）",
    "figura.docs.avatar.get_permission_level": "返回该Avatar当前的权限等级",
    "figura.docs.avatar.get_init_count": "获取该Avatar的初始化指令数",
    "figura.docs.avatar.get_entity_init_count": "获取该Avatar来自`events.ENTITY_INIT`事件的指令数",
    "figura.docs.avatar.get_max_init_count": "获取被观察者允许的最大初始化指令数",
    "figura.docs.avatar.get_tick_count": "获取该Avatar上一Tick来自`events.TICK`事件的指令数",
    "figura.docs.avatar.get_max_tick_count": "获取被观察者允许的来自`events.TICK`事件的最大指令数",
    "figura.docs.avatar.get_render_count": "获取该Avatar上一帧来自`events.RENDER`和`events.POST_RENDER`事件的指令数",
    "figura.docs.avatar.get_max_render_count": "获取被观察者允许的来自`events.RENDER`和`events.POST_RENDER`事件的最大指令数",
    "figura.docs.avatar.get_world_tick_count": "获取该Avatar上一Tick来自`events.WORLD_TICK`事件的指令数",
    "figura.docs.avatar.get_max_world_tick_count": "获取被观察者允许的来自`events.WORLD_TICK`事件的最大指令数",
    "figura.docs.avatar.get_world_render_count": "获取该Avatar上一帧来自`events.WORLD_RENDER`和`events.POST_WORLD_RENDER`事件的指令数",
    "figura.docs.avatar.get_max_world_render_count": "获取被观察者允许的来自`events.WORLD_RENDER`和`events.POST_WORLD_RENDER`事件的最大指令数",
    "figura.docs.avatar.get_complexity": "获取该Avatar当前的复杂度",
    "figura.docs.avatar.get_max_complexity": "获取被观察者允许的最大模型复杂度（模型的面数）",
    "figura.docs.avatar.get_remaining_particles": "获取该Avatar还能生成的粒子数",
    "figura.docs.avatar.get_max_particles": "获取被观察者允许的最大粒子数",
    "figura.docs.avatar.get_remaining_sounds": "获取该Avatar还能播放的音效数",
    "figura.docs.avatar.get_max_sounds": "获取被观察者允许的最大音效数",
    "figura.docs.avatar.get_animation_complexity": "获取该Avatar当前的动画复杂度",
    "figura.docs.avatar.get_max_animation_complexity": "获取被观察者允许的最大动画复杂度（播放的动画频道数）",
    "figura.docs.avatar.get_animation_count": "获取动画中使用的Lua指令数",
    "figura.docs.avatar.get_max_animation_count": "获取被观察者允许的动画中Lua指令数的最大值",
    "figura.docs.avatar.get_max_texture_size": "获取该Avatar可创建的自定义纹理的最大尺寸",
    "figura.docs.avatar.get_buffers_count": "返回该Avatar打开的Buffer数",
    "figura.docs.avatar.get_max_buffers_count": "返回该Avatar允许打开的最大Buffer数",
    "figura.docs.avatar.get_sockets_count": "返回该Avatar打开的Sockets数",
    "figura.docs.avatar.get_max_sockets_count": "返回该Avatar允许打开的最大Sockets数",
    "figura.docs.avatar.can_edit_vanilla_model": "获取观察者是否允许你的Avatar修改原版模型",
    "figura.docs.avatar.can_edit_nameplate": "获取观察者是否允许你的Avatar编辑名称标签",
    "figura.docs.avatar.can_render_offscreen": "获取观察者是否允许你的Avatar离屏渲染",
    "figura.docs.avatar.can_use_custom_sounds": "获取观察者是否允许你的Avatar播放自定义音效",
    "figura.docs.avatar.can_have_custom_skull": "获取观察者是否允许你的Avatar有自定义头颅",
    "figura.docs.avatar.get_nbt": "获取该Avatar存储的NBT数据",
    "figura.docs.avatar.get_max_buffer_size": "获取该Avatar可拥有的最大Buffer大小",
    "figura.docs.biome": "一个Minecraft生物群系的代理\n通过WorldAPI获取实例\n该代理还包含一个已保存的该生物群系的坐标",
    "figura.docs.biome.id": "该生物群系的ID",
    "figura.docs.biome.get_id": "返回该生物群系的ID",
    "figura.docs.biome.get_pos": "返回该生物群系代理所保存的坐标\n保存的坐标用于需要坐标的Biome函数",
    "figura.docs.biome.set_pos": "设置该生物群系代理所保存的坐标\n保存的坐标用于需要坐标的Biome函数",
    "figura.docs.biome.get_tags": "获取该生物群系与世界生成有关的标签",
    "figura.docs.biome.get_temperature": "获取该生物群系的温度",
    "figura.docs.biome.get_precipitation": "获取该生物群系中降水的类型\n类型可以是`NONE`（无），`RAIN`（雨）或`SNOW`（雪）",
    "figura.docs.biome.get_sky_color": "以RGB向量的形式获取该生物群系中天空的颜色",
    "figura.docs.biome.get_foliage_color": "以RGB向量的形式获取该生物群系中树叶的颜色",
    "figura.docs.biome.get_grass_color": "以RGB向量的形式获取该生物群系中草的颜色",
    "figura.docs.biome.get_fog_color": "以RGB向量的形式获取该生物群系中雾的颜色",
    "figura.docs.biome.get_water_color": "以RGB向量的形式获取该生物群系中水的颜色",
    "figura.docs.biome.get_water_fog_color": "以RGB向量的形式获取该生物群系中水下迷雾的颜色",
    "figura.docs.biome.get_downfall": "获取该生物群系的降水值",
    "figura.docs.biome.is_hot": "检查该生物群系是否炎热",
    "figura.docs.biome.is_cold": "检查该生物群系是否寒冷",
    "figura.docs.blockstate": "Minecraft一个方块状态（BlockState）的代理\n通过WorldAPI获取实例\n该代理还包含一个已保存的该方块状态的坐标",
    "figura.docs.blockstate.id": "该BlockState来源方块的ID（标识符）",
    "figura.docs.living_entity.get_armor": "返回该实体的盔甲值",
    "figura.docs.blockstate.properties": "包含该BlockState的属性的表\n如果该BlockState没有属性，则返回空表",
    "figura.docs.blockstate.get_id": "返回该BlockState的ID（标识符）",
    "figura.docs.blockstate.get_properties": "返回包含该BlockState的属性的表",
    "figura.docs.blockstate.get_pos": "返回该BlockState代理中保存的坐标\n保存的坐标用于需要坐标的BlockState函数",
    "figura.docs.blockstate.set_pos": "设置该BlockState代理中保存的坐标\n保存的坐标用于需要坐标的BlockState函数",
    "figura.docs.blockstate.is_translucent": "获取该BlockState是否会向下传播天空光照",
    "figura.docs.blockstate.get_opacity": "根据对光照等级的影响，获取该BlockState的不透明度\n（15为完全阻挡光照，0为无影响）",
    "figura.docs.blockstate.get_map_color": "以RGB向量的形式获取BlockState在地图中的颜色",
    "figura.docs.blockstate.is_solid_block": "获取该BlockState是否被Minecraft视为`solid`（固体）方块",
    "figura.docs.blockstate.is_full_cube": "检查该BlockState的碰撞箱是否为一个完整的方块",
    "figura.docs.blockstate.has_emissive_lighting": "获取该BlockState是否使用自发光纹理（Emissive Lighting）\n（例如岩浆块，但光源方块不一定有自发光纹理）",
    "figura.docs.blockstate.get_hardness": "获取该BlockState的硬度",
    "figura.docs.blockstate.get_comparator_output": "获取比较器从该BlockState输出的信号强度",
    "figura.docs.blockstate.has_block_entity": "获取该BlockState是否有一个相关联的方块实体",
    "figura.docs.blockstate.is_opaque": "获取该BlockState是否不透明",
    "figura.docs.blockstate.emits_redstone_power": "获取该BlockState是否发出红石信号",
    "figura.docs.blockstate.get_luminance": "获取该BlockState的自发光亮度等级",
    "figura.docs.blockstate.get_friction": "获取该BlockState的摩擦\n原版中主要是粘液块和冰等",
    "figura.docs.blockstate.get_velocity_multiplier": "获取该BlockState的速度乘数\n原版中只有灵魂沙和蜂蜜块",
    "figura.docs.blockstate.get_jump_velocity_multiplier": "获取该BlockState的跳跃速度乘数\n原版中只有蜂蜜块",
    "figura.docs.blockstate.get_blast_resistance": "获取该BlockState的爆炸抗性",
    "figura.docs.blockstate.as_item": "返回该BlockState的ItemStack形式，无论Minecraft认为它是什么\n如果不能找到与该方块对应的物品，则返回nil",
    "figura.docs.blockstate.get_tags": "返回包含该BlockState所有标签的表，值为字符串",
    "figura.docs.blockstate.has_collision": "如果该BlockState有碰撞箱则返回True",
    "figura.docs.blockstate.get_collision_shape": "返回表示碰撞形状的边界箱的表\n该表列出了每一个边界箱，每个边界箱包括两个Vector3，第一个向量是边界箱的一角，另一个向量为另一角",
    "figura.docs.client.get_used_memory": "返回Minecraft正在使用的内存的字节数（已使用内存）",
    "figura.docs.blockstate.get_outline_shape": "返回表示轮廓形状的边界箱的表\n该表列出了每一个边界箱，每个边界箱包括两个Vector3，第一个向量是边界箱的一角，另一个向量为另一角",
    "figura.docs.blockstate.get_sounds": "获取该BlockState可以播放的所有音效的名称及其音高和音量\n存储在一个表中",
    "figura.docs.blockstate.get_fluid_tags": "返回包含该BlockState所有流体标签的表，值为字符串",
    "figura.docs.blockstate.get_entity_data": "以表的形式返回与该BlockState相关联的方块实体在其位置上的NBT\n因为该模组是纯客户端的，获取的NBT实际上并不包含所有NBT，有些仅存储在服务端",
    "figura.docs.blockstate.to_state_string": "将该BlockState转换为字符串，就像你在Minecraft指令中见到的一样",
    "figura.docs.blockstate.get_textures": "返回该BlockState的纹理的列表\n键代表剔除方向，值是包含所有纹理路径的表\n注意，这只对常规方块有效，特殊方块（如水、床等）会返回一个空表",
    "figura.docs.blockstate.is_air": "检查这个方块是否为空气",
    "figura.docs.client": "一个全局API，用于与当前的Minecraft客户端交互\n其大部分函数返回值都能在调试屏幕找到",
    "figura.docs.client.get_fps": "获取客户端的FPS\n如果FPS计数器尚未就绪则返回0，当然，也有可能你的FPS确实这么低",
    "figura.docs.client.get_fps_string": "获取在调试屏幕中显示的客户端的FPS字符串\n包含帧率、帧率上限、垂直同步、云类型、生物群系混合范围",
    "figura.docs.client.is_paused": "如果客户端暂停则返回true",
    "figura.docs.client.get_version": "返回当前客户端的Minecraft版本",
    "figura.docs.client.get_version_name": "返回当前客户端的Minecraft版本的扩展名",
    "figura.docs.client.is_snapshot": "检查客户端运行在快照版还是正式版上",
    "figura.docs.client.get_client_brand": "返回客户端的版本类型（version type），通常是客户端的模组加载器名（Brand）",
    "figura.docs.client.get_server_brand": "返回你所在的服务器的类型\n在单人游戏中为`Integrated`（集成/内置）",
    "figura.docs.client.get_chunk_statistics": "返回包含玩家所在区块的信息的字符串\n该字符串在调试屏幕中出现",
    "figura.docs.client.get_entity_statistics": "返回包含客户端已加载实体的信息的字符串\n该字符串在调试屏幕中出现",
    "figura.docs.client.get_sound_statistics": "返回包含客户端正在播放音效的信息的字符串\n该字符串在调试屏幕中出现",
    "figura.docs.client.get_entity_count": "返回当前加载的实体数",
    "figura.docs.client.get_particle_count": "返回当前加载的粒子数",
    "figura.docs.client.get_current_effect": "返回当前应用的着色器，通常在观察有不同视觉效果的实体时使用\n通常返回nil\n（例如`minecraft:creeper`和`minecraft:invert`）",
    "figura.docs.client.get_java_version": "返回你所用的Java版本",
    "figura.docs.client.get_max_memory": "返回Minecraft将尝试使用的最大内存字节数（最大内存）",
    "figura.docs.client.get_allocated_memory": "返回Minecraft可以使用的最大内存字节数（已分配内存）",
    "figura.docs.client.is_window_focused": "如果Miencraft窗口当前已聚焦则返回true",
    "figura.docs.client.is_hud_enabled": "如果HUD被启用则返回true（F1可禁用HUD）",
    "figura.docs.client.is_debug_overlay_enabled": "如果调试屏幕开启则返回true",
    "figura.docs.client.get_window_size": "以像素为单位返回Minecraft窗口的尺寸`{宽度,高度}`",
    "figura.docs.client.get_fov": "返回当前客户端的视场角设置，不包括速度效果或疾跑等附加效果",
    "figura.docs.client.get_system_time": "以毫秒为单位返回当前的系统时间",
    "figura.docs.client.get_mouse_pos": "以像素为单位返回鼠标指针的坐标，相对于左上角",
    "figura.docs.client.get_scaled_window_size": "以Minecraft内部GUI单位返回窗口的尺寸",
    "figura.docs.client.get_gui_scale": "返回当前界面尺寸\n如果使用自动，它将返回实际使用的尺寸",
    "figura.docs.client.get_camera_pos": "返回观察者摄像机的坐标",
    "figura.docs.client.get_camera_rot": "返回观察者摄像机的旋转",
    "figura.docs.client.get_camera_dir": "返回一个指向观察者摄像机视线方向的单位向量",
    "figura.docs.client.get_text_width": "以像素为单位返回给定文本的宽度\n如果有多行，则返回所有行的最大宽度",
    "figura.docs.client.get_text_height": "以像素为单位返回给定文本的高度",
    "figura.docs.client.get_text_dimensions": "返回给定文本的宽度和高度，换行并切除到最大宽度",
    "figura.docs.client.get_active_lang": "以字符串形式返回当前游戏语言",
    "figura.docs.client.is_mod_loaded": "检查客户端是否安装了给定ModID对应的模组",
    "figura.docs.client.has_shader_pack_mod": "检查客户端是否安装了着色器包模组\n（“光影包”是对“Shader Pack”的错误翻译）",
    "figura.docs.client.has_shader_pack": "检查客户端是否正在使用着色器包\n（“光影包”是对“Shader Pack”的错误翻译）",
    "figura.docs.client.get_shader_pack_name": "以字符串形式返回当前着色器包的名称，如果没有使用则为空\n（“光影包”是对“Shader Pack”的错误翻译）",
    "figura.docs.client.has_resource": "检查特定资源是否存在于客户度资源中",
    "figura.docs.client.get_active_resource_packs": "返回包含正在使用的资源包的名称的表",
    "figura.docs.client.get_figura_version": "获取客户端的Figura版本",
    "figura.docs.client.compare_versions": "比较两个版本号，前者小于后者对应-1，等于对应0，大于对应1",
    "figura.docs.client.generate_uuid": "生成一个随机UUID",
    "figura.docs.client.int_uuid_to_string": "将Int数组形式的UUID转换为十六进制字符串形式",
    "figura.docs.client.uuid_to_int_array": "将字符串UUID转换为Int数组形式，返回四个Int",
    "figura.docs.client.get_viewer": "从运行的客户端返回玩家实体",
    "figura.docs.client.get_camera_entity": "返回当前摄像机的目标实体，返回你当前观察的实体，包括你自己",
    "figura.docs.client.get_server_data": "返回包含当前连接的服务器的信息的表（也包括单人世界）",
    "figura.docs.client.get_date": "返回包含客户端当前时间信息的表",
    "figura.docs.client.get_registry": "返回指定注册项中的所有值的列表\n有关有效注册项，另见`registries`枚举值",
    "figura.docs.client.get_frame_time": "返回当前的上一Tick到下一Tick的进度\n这是在`RENDER`事件中作为`delta`的值",
    "figura.docs.client.get_actionbar": "返回当前动作栏的文本，如果动作栏不可见则为nil",
    "figura.docs.client.get_title": "返回当前标题的文本，如果标题不可见则为nil",
    "figura.docs.client.get_subtitle": "返回当前副标题的文本，如果副标题不可见则为nil",
    "figura.docs.client.get_scoreboard": "返回关于计分板的数据，同时可以有多个计分板可见(侧边栏、队伍侧边栏、列表和名称下方)，所以，每个计分板以它们显示的位置分组",
    "figura.docs.client.list_atlases": "返回注册的纹理图集的路径的列表",
    "figura.docs.client.get_atlas": "返回包含给定纹理图集信息的TextureAtlasAPI对象\n如果该纹理图集未找到则返回nil",
    "figura.docs.client.get_enum": "返回一个列表，其中包含给定枚举项的所有条目\n枚举可以在“/figura docs enums”中找到",
    "figura.docs.client.get_tab_list": "返回一个表，包含玩家列表中显示的文本",
    "figura.docs.client.get_translated_string": "返回给定键翻译后的字符串\n翻译通过当前客户端语言完成\n可选的传入一个参数或一个包含所有参数的裂变，用于替换翻译中的变量",
    "figura.docs.config": "一个全局API，用于在游戏会话之间保存和加载Avatar数据",
    "figura.docs.config.get_name": "返回目标文件夹的名称",
    "figura.docs.config.set_name": "设置目标文件的名称，数据将从该文件保存和加载\n默认为Avatar名称",
    "figura.docs.config.save": "将变量保存到特定键下\n如果值为nil，则从文件中删除该变量",
    "figura.docs.config.load": "加载特定键下保存的变量\n如果没有给定键，则返回包含所有保存变量的表",
    "figura.docs.entity": "作为Minecraft世界中一个实体的代理",
    "figura.docs.entity.is_loaded": "检查该实体对象是否仍在更新和加载\n未加载的实体是指处于另一个维度或超出渲染距离的东西",
    "figura.docs.entity.is_silent": "当实体不发出声音时返回true",
    "figura.docs.living_entity.get_death_time": "返回该实体已死亡时间的Tick数",
    "figura.docs.entity.get_pos": "获取这个实体在世界中的坐标\n如果传入Delta，它将被用于在前一Tick和当前Tick下的位置之间进行线性插值\nDelta的默认值为1",
    "figura.docs.entity.get_rot": "以角度获取这个实体的偏航角、俯仰角\n如果传入Delta，它将被用于在前一Tick和当前Tick下的旋转之间进行线性插值\nDelta的默认值为1",
    "figura.docs.entity.get_uuid": "获取被代理实体的UUID",
    "figura.docs.entity.get_type": "获取该实体的ID\n例如：“minecraft:pig”",
    "figura.docs.entity.get_velocity": "获取该实体当前在世界坐标系下的速度，通过当前Tick位置减去上一Tick位置得到",
    "figura.docs.entity.get_look_dir": "返回指向实体朝向的单位向量\n参考F3+B开启判定箱显示后的蓝线",
    "figura.docs.entity.get_frozen_ticks": "获取该实体在细雪中被冻结的Tick数",
    "figura.docs.entity.get_max_air": "获取该实体的最大氧气值",
    "figura.docs.entity.get_dimension_name": "获取该实体所在维度的ID",
    "figura.docs.entity.get_pose": "返回实体当前的动作\n可以是 “STANDING”、“FALL_FLYING”、“SLEEPING”、“SWIMMING”、“SPIN_ATTACK”、“CROUCHING”、“LONG_JUMPING”、“DYING”之一",
    "figura.docs.entity.get_vehicle": "返回该实体所骑乘实体的代理\n如果没有骑乘任何实体，返回nil",
    "figura.docs.entity.is_on_ground": "返回该实体是否在地面上",
    "figura.docs.entity.get_eye_height": "返回该实体的眼睛高度",
    "figura.docs.entity.get_bounding_box": "以三维向量返回该实体边界箱的大小\n{x, y, z}分别是宽度、高度和宽度\nMinecraft实体的边界箱的底面总是正方形",
    "figura.docs.entity.get_name": "如果该实体有自定义名称，则获取其名称\n如果没有，则返回翻译后的`getType()`",
    "figura.docs.entity.is_wet": "满足下列任意条件时返回ture：该实体在水中，该实体在雨中，该实体在气泡柱中\n否则，返回false",
    "figura.docs.entity.is_in_water": "当该实体在水中时返回true，包括含水方块",
    "figura.docs.entity.is_underwater": "当实体的视平线在水中时返回ture",
    "figura.docs.entity.is_in_lava": "当实体在熔岩时返回true",
    "figura.docs.entity.is_in_rain": "当实体在雨中时返回true",
    "figura.docs.entity.has_avatar": "当该实体加载了Avatar时返回true",
    "figura.docs.entity.is_sprinting": "当实体疾跑时返回true",
    "figura.docs.entity.get_eye_y": "返回该实体眼睛所处的Y坐标\n不要与`getEyeHeight`混淆，此函数也考虑到实体自身的Y坐标",
    "figura.docs.entity.is_glowing": "当实体有发光效果时返回true",
    "figura.docs.entity.is_invisible": "因为某些原因使得该实体不可见时返回true",
    "figura.docs.entity.is_sneaking": "当实体在逻辑上是潜行时返回true，例如无法从方块边缘滑落、不能从墙后看到玩家名称标签等等",
    "figura.docs.entity.is_crouching": "当实体在视觉上是潜行时返回true",
    "figura.docs.entity.get_item": "从给定槽位的物品获取一个ItemStack\n对于玩家，槽位索引如下，1为主手，2为副手，3~6为盔甲槽，顺序是从靴子到头盔\n如果给出的索引无效，则返回nil",
    "figura.docs.entity.get_nbt": "获取包含该实体NBT的table\n注意！并不能获取所有值，有些值仅在服务端处理",
    "figura.docs.entity.is_on_fire": "当实体着火时返回true",
    "figura.docs.entity.is_alive": "返回该实体是否活着",
    "figura.docs.entity.get_permission_level": "返回该实体的权限等级\n服务器管理员默认情况下权限等级为4",
    "figura.docs.entity.get_passengers": "返回该实体所有乘客的列表",
    "figura.docs.entity.get_controlling_passenger": "返回控制该实体的实体",
    "figura.docs.entity.get_controlled_vehicle": "返回该实体控制的载具",
    "figura.docs.entity.has_container": "检查该实体是否有容器，包括运输船、运输矿车等",
    "figura.docs.entity.has_inventory": "检查该实体是否有物品栏，包括马、骆驼、羊驼等",
    "figura.docs.entity.get_targeted_block": "以BlockState返回该实体看向的方块\n该方块出现在调试屏幕中\n默认最大距离是20，最小是-20\n返回该方块的BlockState、视线与方块的交点、看向方块的面",
    "figura.docs.entity.get_targeted_entity": "返回当前看向实体的代理\n该实体在调试屏幕中出现\n最大默认距离是20，最小是0",
    "figura.docs.entity.get_variable": "获取通过AvatarAPI的`store()`函数保存的变量的值",
    "figura.docs.entity.is_living": "检查该实体是否是生物",
    "figura.docs.entity.is_player": "检查该实体是否是玩家",
    "figura.docs.living_entity": "作为Minecraft世界中一个生物的代理",
    "figura.docs.living_entity.get_body_yaw": "以角度获取这个实体的偏航角\n如果传入Delta，它将被用于在前一Tick和当前Tick下的偏航角之间进行线性插值\nDelta的默认值为1",
    "figura.docs.living_entity.get_held_item": "以ItemStack返回表示该实体的主手物品\n如果传入true，将会获取副手上的物品\n如果该实体相应手上没有物品，则返回air",
    "figura.docs.living_entity.get_active_item": "以ItemStack返回该实体正在使用的物品\n如果它没有使用任何物品，则返回air",
    "figura.docs.living_entity.get_active_item_time": "返回该实体所用物品已使用时间的Tick数",
    "figura.docs.living_entity.get_health": "返回该实体当前的生命值",
    "figura.docs.living_entity.get_max_health": "返回该实体的最大生命值",
    "figura.docs.living_entity.get_arrow_count": "返回插在该实体身上的箭矢的数量",
    "figura.docs.living_entity.get_stinger_count": "返回插在该实体身上的蜜蜂螫针的数量",
    "figura.docs.living_entity.is_left_handed": "当该实体的主手是左手时返回true",
    "figura.docs.living_entity.is_using_item": "当该实体正在使用物品时返回true",
    "figura.docs.living_entity.get_active_hand": "返回`OFF_HAND`或`MAIN_HAND`，取决于该实体的哪只手正在使用物品",
    "figura.docs.living_entity.is_climbing": "当该实体在使用一个可攀爬方块时返回true，比如梯子和藤蔓",
    "figura.docs.living_entity.get_swing_time": "返回该实体手臂挥舞时间的Tick数",
    "figura.docs.living_entity.is_swinging_arm": "当该实体的手臂挥动时返回true",
    "figura.docs.living_entity.get_swing_arm": "返回`OFF_HAND`或`MAIN_HAND`，取决于该实体的哪只手正在挥动",
    "figura.docs.living_entity.get_swing_duration": "返回该实体手臂挥动时长的Tick数",
    "figura.docs.living_entity.get_absorption_amount": "返回该实体的伤害吸收值",
    "figura.docs.living_entity.is_sensitive_to_water": "当该实体碰到水会受伤时返回true",
    "figura.docs.living_entity.get_entity_category": "返回该实体的类别\n类别是：`ARTHROPOD`（节肢生物）、`UNDEAD`（不死生物）、`WATER`（水生生物）、`ILLAGER`（灾厄村民）以及默认的`UNDEFINED`（未定义）",
    "figura.docs.living_entity.is_gliding": "当该实体正在用鞘翅滑翔时返回true",
    "figura.docs.living_entity.is_blocking": "当该实体正在用盾牌格挡时返回true",
    "figura.docs.living_entity.is_visually_swimming": "当该实体视觉上有游泳动作时返回true",
    "figura.docs.living_entity.riptide_spinning": "当该实体处于激流冲刺状态时返回ture",
    "figura.docs.player": "作为Minecraft世界中玩家实体的代理\nAvatar的用户（对应的玩家实体）有一个全局实例，使用`player`访问",
    "figura.docs.player.get_food": "获取玩家当前的饥饿值",
    "figura.docs.player.get_saturation": "获取玩家当前的饱和度",
    "figura.docs.player.get_exhaustion": "获取玩家当前的消耗度",
    "figura.docs.player.get_experience_progress": "获取玩家经验到下一级的进度，范围为[0,1)",
    "figura.docs.player.get_experience_level": "获取玩家当前的经验等级",
    "figura.docs.player.get_model_type": "返回`SLIM`（纤细）或`DEFAULT`（默认），取决于玩家的模型类型",
    "figura.docs.player.get_gamemode": "返回`SURVIVAL`（生存模式）、`CREATIVE`（创造模式）、`ADVENTURE`（冒险模式）或`SPECTATOR`（旁观者模式）取决于玩家当前的游戏模式\n如果游戏模式未知则返回nil",
    "figura.docs.player.has_cape": "返回玩家是否有披风",
    "figura.docs.player.has_skin": "返回玩家是否有自定义皮肤",
    "figura.docs.player.is_skin_layer_visible": "返回自定义皮肤中特定皮肤层当前是否可见",
    "figura.docs.player.is_fishing": "返回玩家是否在钓鱼",
    "figura.docs.player.get_charged_attack_delay": "返回攻击冷却时间的Tick数",
    "figura.docs.player.get_shoulder_entity": "返回包含该实体左肩或右肩上的实体的NBT的表",
    "figura.docs.player.get_team_info": "返回包含该玩家所在队伍信息的表\n如果该玩家没有队伍则返回nil",
    "figura.docs.player.get_ip_address": "返回该玩家的IP地址",
    "figura.docs.player.get_cooldown_percent": "返回给定ItemStack当前的冷却百分比，范围为[0,1]\n如果没有则返回0\n接受两个参数，ItemStack（即要检查的物品）和Delta，Delta用于偏移冷却的Tick数，用于更平滑的动画",
    "figura.docs.viewer": "Player的扩展，仅用于观察者，作为代理允许访问某些仅限主机的函数",
    "figura.docs.events.post_render": "`POST_RENDER`事件在每一帧运行，且在Avatar渲染之后\n第一个参数Delta，范围为[0,1)，表示上一Tick到下一Tick的进度\n第二个参数是当前RenderMode的上下文，它是该渲染事件的名称\n第三个参数是用于渲染Avatar的源矩阵（Source Matrix）",
    "figura.docs.events.world_render": "`WORLD_RENDER`事件在世界渲染前的每一帧运行\n当世界可见时总是运行，即使Avatar本身不可见，所以该事件在第一人称也运行\n第一个参数Delta，范围为[0,1)，表示上一Tick到下一Tick的进度",
    "figura.docs.events.post_world_render": "`POST_WORLD_RENDER`事件在世界渲染后的每一帧运行\n当世界可见时总是运行，即使Avatar本身不可见，所以该事件在第一人称也运行\n第一个参数Delta，范围为[0,1)，表示上一Tick到下一Tick的进度",
    "figura.docs.events.chat_send_message": "`CHAT_SEND_MESSAGE`事件在每次你发送聊天消息时运行\n传入一个字符串参数，包含发送的消息\n返回值会链接到下一个同类型的事件，如果返回`nil`则取消消息发送，返回其他值则修改发送的消息（如果设置允许）",
    "figura.docs.events.chat_receive_message": "`CHAT_RECEIVE_MESSAGE`事件在每次接收到聊天消息时运行\n第一个参数是接收到的原始字符串\n第二个参数是接收到的文本的JSON字符串表示\n如果第一个返回值不为nil，则消息将被替换为该值\n如果第一个返回值为false，则抑制添加此消息\n第二个返回值是可选的RGB向量，将用作此消息的背景颜色",
    "figura.docs.events.skull_render": "在每一个你的头颅上调用\n它有五个参数，如下所示：\n（数字）上一Tick到下一Tick的进度\n（BlockState）该头颅方块，当从方块调用时\n（ItemStack）该头颅物品，当从物品调用时\n（Entity）实体，当从实体调用时\n（字符串）渲染的类型（LEFT_HAND、HEAD、BLOCK……）\n如果返回值为true，则该头颅不会渲染",
    "figura.docs.events.mouse_scroll": "`MOUSE_SCROLL`事件在每次鼠标滚轮滚动时运行\n接受一个参数dir，表示滚动的方向\n如果返回true，则取消其原版行为",
    "figura.docs.events.mouse_move": "`MOUSE_MOVE`事件在每次移动鼠标时运行\n有两个参数，`x`和`y`, 其为当前鼠标位置与上一个保存的位置的插值\n如果返回true，则取消其原版行为\n注意，取消原版行为也取消保存上一个鼠标位置",
    "figura.docs.events.mouse_press": "`MOUSE_PRESS`事件在按下鼠标按键时运行\n接受三个数字参数，“button”表示按下按键的ID，“status”表示按下的状态（0表示释放，1表示按下，2表示按住），“modifier”表示按下的修饰键的位掩码（例如shift或alt）\n如果返回true，则取消其原版行为",
    "figura.docs.events": "一个全局API，包含所有Figura提供的事件\n通过`events`访问",
    "figura.docs.events.entity_init": "`ENTITY_INIT`事件在该Avatar实体存在后立刻运行",
    "figura.docs.events.tick": "`TICK`事件在该Avatar实体存在时每一游戏刻运行",
    "figura.docs.events.world_tick": "`WORLD_TICK`事件每一游戏刻运行",
    "figura.docs.events.render": "`RENDER`事件在每一帧运行，且在Avatar渲染之前\n第一个参数Delta，范围为[0,1)，表示上一Tick到下一Tick的进度\n第二个参数是当前RenderMode的上下文，它是该渲染事件的名称\n第三个参数是用于渲染Avatar的源矩阵（Source Matrix）",
    "figura.docs.events.key_press": "`KEY_PRESS`事件在每次按下键盘按键时运行\n接受三个数字参数，一个`key`，表示按下的按键的编号ID，一个`status`，表示按下事件的状态（0表示释放，1表示按下，2表示按住），以及一个“modifier”，表示按下的修饰键的位掩码（例如shift或alt）\n如果返回true，则事件取消其原版功能",
    "figura.docs.events.char_typed": "`CHAR_TYPED`事件在每一个字符输入时运行一次\n接受三个参数，由字符码转换而来的字符串形式的输入，修饰符，是用于检测是否按下任何修饰键的位掩码（例如shift、ctrl、alt），输入字符的字符码（ASCII码）",
    "figura.docs.events.use_item": "`USE_ITEM`事件在实体使用物品时运行\n接受ItemStack（使用的物品）、动作（字符串）和会产生的粒子数作为参数\n如果返回true，则取消其原版行为",
    "figura.docs.buffer.read_long_le": "从该Buffer中读取一个小端字节序Long",
    "figura.docs.events.arrow_render": "`ARROW_RENDER`事件在每个Avatar所有者射出的实体箭上运行\n接受两个参数，“Delta”表示上一Tick到下一Tick的进度，以及箭的实体\n返回true会阻止渲染该箭矢，包括箭矢的父部件\n需要“修改原版模型”权限",
    "figura.docs.events.item_render": "在你的每一个被渲染的物品上调用\n接受六个参数，被渲染的物品、渲染模式（RenderMode）、将被应用在物品上的位置、旋转、缩放以及它是否在左手上渲染\n返回的ModelPart的ParentType为“Item”时，将停止渲染该物品，而渲染返回的ModelPart",
    "figura.docs.events.on_play_sound": "每次播放新音效时调用\n参数如下：该音效的ID、它的世界坐标、音量、音高、是否循环、该音效的分类和该音效的文件路径 \n返回true以阻止该音效播放",
    "figura.docs.events.resource_reload": "每次客户端重载资源时调用，允许你重新创建或更新资源纹理引用",
    "figura.docs.events.get_events": "返货包含所有事件类型的表",
    "figura.docs.event": "Minecraft中某个事件的钩子（Hook）\n你可以向某个事件注册函数，这些函数会在事件发生时调用",
    "figura.docs.event.register": "在该事件上注册一个函数\n函数按注册顺序调用\n可以给定一个可选的字符串参数，将函数归类到该名称下，便于之后的管理",
    "figura.docs.event.clear": "清除给定事件下的所有函数",
    "figura.docs.event.remove": "从该事件中移除一个函数，或者当给定字符串时，移除注册在该名称下的所有函数\n返回被移除函数的数量",
    "figura.docs.event.get_registered_count": "返回给定名称下注册的函数的数量",
    "figura.docs.host": "一个全局API，专用于该Avatar的主机\n对于其他观察者，什么都不做",
    "figura.docs.host.unlock_cursor": "设置该值为true会解锁你的鼠标指针，允许你在屏幕上自由移动而不是控制玩家的视角",
    "figura.docs.host.is_host": "如果脚本实例在主机上运行，则返回true",
    "figura.docs.host.is_cursor_unlocked": "检查鼠标指针当前是否被解锁\n仅响应你在脚本中所做的更改，不包括Minecraft自身",
    "figura.docs.host.set_unlock_cursor": "设置鼠标指针是否解锁，允许你在屏幕上自由移动而不是控制玩家的视角",
    "figura.docs.host.set_title_times": "设置标题的持续时间，以及淡入和淡出时间",
    "figura.docs.host.clear_title": "清除当前的标题",
    "figura.docs.host.set_title": "将标题设置为给定文本\n文本应以Json格式给出",
    "figura.docs.host.set_subtitle": "将副标题设置为给定文本\n文本以Json字符串给出",
    "figura.docs.host.set_actionbar": "将动作栏设置为给定文本\n布尔参数默认为false",
    "figura.docs.host.send_chat_message": "向聊天发送给定消息",
    "figura.docs.host.send_chat_command": "向聊天发送给定指令",
    "figura.docs.host.append_chat_history": "将消息添加到最近聊天记录中",
    "figura.docs.host.get_chat_message": "返回包含一个聊天消息的信息的表\n接受一个索引，1表示聊天中的最后一个消息",
    "figura.docs.host.set_chat_message": "以给定文本修改一个聊天消息\n接受一个索引，1表示聊天中的最后一个消息\n将消息设置为nil会从聊天中移除它",
    "figura.docs.host.swing_arm": "挥动玩家的手臂\n如果为true，则挥动副手",
    "figura.docs.host.is_first_person": "如果摄像机处于第一人称则返回true",
    "figura.docs.host.is_camera_backwards": "如果摄像机朝后则返回true",
    "figura.docs.host.get_slot": "从给定槽位的物品中获取一个ItemStack\n槽位要么是它们的数字ID，要么是字符串名称，与`/item`指令相同",
    "figura.docs.host.set_slot": "将给定槽位设置为给定ItemStack\n槽位要么是它们的数字ID，要么是字符串名称，与`/item`指令相同\n仅在创造模式可用",
    "figura.docs.host.get_chat_color": "获取聊天栏文本的颜色",
    "figura.docs.host.set_chat_color": "设置聊天栏中已输入文本的颜色",
    "figura.docs.host.get_chat_text": "获取聊天栏中已输入的文本",
    "figura.docs.host.set_chat_text": "将聊天栏的文本设置为给定的字符串",
    "figura.docs.host.get_screen": "获取玩家当前所在界面的类名\n如果玩家不在界面中，则返回nil",
    "figura.docs.host.get_screen_slot_count": "获取玩家所在界面的槽位数\n如果玩家没有打开一个界面或者该界面没有槽位，则返回nil",
    "figura.docs.host.get_screen_slot": "获取屏幕中给定槽位的ItemStack\n槽位要么是它们的数字ID，要么是字符串名称，与`/item`指令相同\n如果玩家没有打开一个界面或者该界面没有槽位或槽位的索引大于最大值，则返回nil",
    "figura.docs.host.is_chat_open": "检查主机是否打开了聊天屏幕",
    "figura.docs.host.is_container_open": "检查主机是否打开了容器界面",
    "figura.docs.host.screenshot": "对当前屏幕截图并返回其纹理",
    "figura.docs.host.is_avatar_uploaded": "检查该Avatar是否已被上传",
    "figura.docs.host.get_status_effects": "返回包含玩家所有状态效果的表\n该表包含子表（sub-table），每一个子表都包含该状态效果的ID、等级、持续时间（单位为Tick）、粒子是否可见",
    "figura.docs.host.get_clipboard": "获取剪贴板中的文本",
    "figura.docs.host.set_clipboard": "设置剪贴板中的文本",
    "figura.docs.host.get_attack_charge": "返回玩家蓄力攻击的进度，[0,1]\n如果小于1，每一次攻击都会是轻击",
    "figura.docs.host.is_jumping": "检查玩家是否在起跳\n注意，这只在玩家起跳的第一个Tick时为true",
    "figura.docs.host.is_flying": "检查玩家当前是否在飞行",
    "figura.docs.host.get_reach_distance": "返回玩家当前的交互范围",
    "figura.docs.host.get_air": "获取玩家剩余的氧气值",
    "figura.docs.host.get_pick_block": "返回当前客户端瞄准的方块\n返回该方块的BlockState、视线与方块的交点、看向方块的面",
    "figura.docs.host.get_pick_entity": "返回当前客户端瞄准的实体",
    "figura.docs.vectors": "一个全局API，提供用于创建和操纵向量的函数\n通过`vectors`访问",
    "figura.docs.vectors.vec": "创建并返回一个大小合适的向量以保存传入的值\n例如：如果你调用`vec(3, 4, 0, 2)`，将返回包含这些值的Vector4\n该函数有一个全局别名`vec`，意味着“vectors.”可以被省略",
    "figura.docs.vectors.vec2": "通过给定值创建并返回一个Vector2\nnil被视为0",
    "figura.docs.vectors.vec3": "通过给定值创建并返回一个Vector3\nnil被视为0",
    "figura.docs.vectors.vec4": "通过给定值创建并返回一个Vector4\nnil被视为0",
    "figura.docs.vectors.rgb_to_int": "将给定颜色从RGB格式转换为整数",
    "figura.docs.vectors.int_to_rgb": "将给定颜色从整数转换为RGB格式",
    "figura.docs.vectors.hex_to_rgb": "将一个HEX颜色字符串解析为RGB格式的向量\nHEX的“#”是可选的，也可以是任意长的，但只有前六位被解析，短HEX也是支持的（长度为3）\n例如：“#42”与“420000”等价的，“F0B”与“FF00BB”也是等价的",
    "figura.docs.vectors.hsv_to_rgb": "将给定颜色从HSV格式转换为RGB格式",
    "figura.docs.vectors.rgb_to_hsv": "将给定颜色从RGB格式转换为HSV格式",
    "figura.docs.vectors.rgb_to_hex": "将给定颜色从RGB格式转换为HEX\n返回值不包括“#”",
    "figura.docs.vectors.rotate_around_axis": "将一个向量绕另一个作为旋转轴的向量旋转",
    "figura.docs.vectors.to_camera_space": "将一个世界中的坐标转换为相对于观察者摄像机的坐标",
    "figura.docs.vectors.world_to_screen_space": "将一个世界中的坐标转为为相对于观察者屏幕的坐标",
    "figura.docs.vectors.angle_to_dir": "将偏航角和俯仰角（以角度为单位）转为为一个表示方向的向量",
    "figura.docs.vector2": "一个包含二个数字的向量\n可以通过`vectors`API中的函数创建（也可以用全局别名`vec`）",
    "figura.docs.vector3": "一个包含三个数字的向量\n可以通过`vectors`API中的函数创建（也可以用全局别名`vec`）",
    "figura.docs.vector4": "一个包含四个数字的向量\n可以通过`vectors`API中的函数创建（也可以用全局别名`vec`）",
    "figura.docs.vector_n.x": "该向量的第一个坐标\n也可以通过索引`r`和[1]获取",
    "figura.docs.vector_n.y": "该向量的第二个坐标\n也可以通过索引`g`和[2]获取",
    "figura.docs.vector_n.z": "该向量的第三个坐标\n也可以通过索引`b`和[3]获取",
    "figura.docs.vector_n.w": "该向量的第四个坐标\n也可以通过索引`a`和[4]获取",
    "figura.docs.vector_n.reset": "将该向量的所有值重置为0，并返回自身以链式调用",
    "figura.docs.vector_n.set": "将该向量设置为给定值\nnil视为0\n返回自身以链式调用",
    "figura.docs.vector_n.add": "将给定的向量或值与此向量相加，并返回自身以链式调用",
    "figura.docs.vector_n.sub": "从此向量中减去给定的向量或值，并返回自身以链式调用",
    "figura.docs.vector_n.offset": "以给定因子偏移此向量，各个分量与此因子相加，并返回自身以链式调用",
    "figura.docs.vector_n.mul": "将给定向量或值与此向量逐分量相乘，nil视为0，并返回自身以链式调用",
    "figura.docs.vector_n.div": "将给定向量或值与此向量逐分量相除，nil视为0，返回自身以链式调用\n注意，在Lua中除以0并不会报错，而是得到inf（无穷大），导致计算出的向量的分量是无穷",
    "figura.docs.vector_n.reduce": "将给定向量或值与此向量逐分量取模运算，并返回自身以链式调用",
    "figura.docs.vector_n.scale": "以给定因子缩放此向量，并返回自身以链式调用",
    "figura.docs.vector_n.unpack": "返回该向量的各个分量",
    "figura.docs.vector_n.transform": "用给定矩阵变换该矢量，并返回自身以链式调用",
    "figura.docs.vector_n.length_squared": "返回该向量长度的平方\n适用于只关心模长时，避免了开平方从而减少运算",
    "figura.docs.vector_n.copy": "创建并返回该向量的副本",
    "figura.docs.vector_n.dot": "返回该向量与另一个向量的点乘（又称内积或数量积）",
    "figura.docs.vector_n.normalize": "使该向量的模长缩放为1，除非模长原本是0\n返回自身以链式调用",
    "figura.docs.vector_n.normalized": "返回该向量模长为1的副本，除非模长原本是0",
    "figura.docs.vector_n.clamp_length": "修改该向量使其模长在最小和最大长度之间\n如果向量模长为0，则不修改\n返回自身以链式调用",
    "figura.docs.vector_n.clamped": "返回该向量修改后的副本，其模长钳制为最小值和最大值之间\n如果该向量的模长为0，则副本也相同",
    "figura.docs.vector_n.length": "返回该向量的模长",
    "figura.docs.vector_n.to_rad": "将该向量各个分量转换为弧度（假设该向量的各个分量表示角度）",
    "figura.docs.vector_n.to_deg": "将该向量各个分量转换为角度（假设该向量的各个分量表示弧度）",
    "figura.docs.vector_n.floor": "返回该向量的副本且所有值向下取整",
    "figura.docs.vector_n.ceil": "返回该向量的副本且所有值向上取整",
    "figura.docs.vector_n.apply_func": "对该向量的每一个元素调用给定的函数，并将该元素设置为函数返回值\n当前索引和它的值将作为参数传入给函数\n返回自身以链式调用",
    "figura.docs.vector_n.augmented": "返回该向量的增广形式（略有不同）\n增广形式是其长度加一的向量\n新的轴的值为给定值，不指定时则为1",
    "figura.docs.vector3.cross": "将该向量设置为自身与另一向量的叉乘（又称外积或向量积）\n返回自身以链式调用",
    "figura.docs.vector3.crossed": "返回一个新向量，它是该向量与另一向量的叉乘（又称外积或向量积）",
    "figura.docs.vertex": "一个顶点对象",
    "figura.docs.vertex.get_pos": "返回该顶点的位置向量",
    "figura.docs.vertex.set_pos": "设置该顶点的位置向量",
    "figura.docs.vertex.get_uv": "返回该顶点的UV向量",
    "figura.docs.vertex.set_uv": "设置该顶点的UV向量",
    "figura.docs.vertex.get_normal": "返回该顶点的法向量",
    "figura.docs.vertex.set_normal": "设置该顶点的法向量",
    "figura.docs.data": "提供处理数据相关功能的函数的全局API",
    "figura.docs.data.create_buffer": "创建一个空Buffer",
    "figura.docs.buffer": "一个Buffer（字节缓冲区）对象",
    "figura.docs.buffer.read": "从该Buffer中读取一个字节",
    "figura.docs.buffer.read_short": "从该Buffer中读取一个Short",
    "figura.docs.buffer.read_ushort": "从该Buffer中读取一个无符号Short",
    "figura.docs.buffer.read_int": "从该Buffer中读取一个Int",
    "figura.docs.buffer.read_long": "从该Buffer中读取一个Long",
    "figura.docs.buffer.read_float": "从该Buffer中读取一个Float",
    "figura.docs.buffer.read_double": "从该Buffer中读取一个Double",
    "figura.docs.buffer.read_short_le": "从该Buffer中读取一个小端字节序Short",
    "figura.docs.buffer.read_ushort_le": "从该Buffer中读取一个小端字节序无符号Short",
    "figura.docs.buffer.read_int_le": "从该Buffer中读取一个小端字节序Int",
    "figura.docs.buffer.read_float_le": "从该Buffer中读取一个小端字节序Float",
    "figura.docs.buffer.read_double_le": "从该Buffer中读取一个小端字节序Double",
    "figura.docs.buffer.read_string": "从该Buffer中读取一个字符串，默认编码格式是`UTF-8，`Length`是要读取的字节数",
    "figura.docs.buffer.read_base_64": "以Base64字符串形式从该Buffer中读取字节，`Length`是要读取的字节数，默认长度是1024",
    "figura.docs.buffer.read_byte_array": "以字符串形式从该Buffer中读取字节 `Length`要读取的字节数，默认长度是1024",
    "figura.docs.buffer.write": "向该Buffer写入一个字节",
    "figura.docs.buffer.write_short": "向该Buffer写入一个Short",
    "figura.docs.buffer.write_ushort": "向该Buffer写入一个无符号Short",
    "figura.docs.buffer.write_int": "向该Buffer写入一个Int",
    "figura.docs.buffer.write_long": "向该Buffer写入一个Long",
    "figura.docs.buffer.write_float": "向该Buffer写入一个Float",
    "figura.docs.buffer.write_double": "向该Buffer写入一个Double",
    "figura.docs.buffer.write_short_le": "向该Buffer写入一个小端字节序Short",
    "figura.docs.buffer.write_ushort_le": "向该Buffer写入一个小端字节序无符号Short",
    "figura.docs.buffer.write_int_le": "向该Buffer写入一个小端字符序Int",
    "figura.docs.buffer.write_long_le": "向该Buffer写入一个小端字符序Long",
    "figura.docs.buffer.write_float_le": "向该Buffer写入一个小端字符序Float",
    "figura.docs.buffer.write_double_le": "向该Buffer写入一个小端字符序Double",
    "figura.docs.buffer.write_string": "向该Buffer写入一个字符串并返回写入的字节数，默认编码格式是`UTF-8`",
    "figura.docs.buffer.write_base_64": "向该Buffer写入一个Base64字符串并返回写入的字节数",
    "figura.docs.buffer.write_byte_array": "将字符串的原始字节写入该Buffer，并返回写入的字节数.",
    "figura.docs.buffer.get_length": "返回该Buffer的长度",
    "figura.docs.buffer.get_position": "返回该Buffer的当前位置",
    "figura.docs.buffer.set_position": "设置该Buffer的当前位置",
    "figura.docs.buffer.available": "返回可读取的字节数",
    "figura.docs.buffer.get_max_capacity": "返回该Buffer的最大容量",
    "figura.docs.buffer.read_from_stream": "从提供的InputStream中读取数据并写入Buffer，返回写入的字节数",
    "figura.docs.buffer.write_to_stream": "将该Buffer的数据写入提供的OutputStream",
    "figura.docs.buffer.close": "关闭该Buffer，标记其内存以被垃圾收集器释放，调用该函数后Buffer将不再可用",
    "figura.docs.buffer.is_closed": "检查该Buffer是否已被关闭",
    "figura.docs.itemstack": "Minecraft中物品堆叠的代理",
    "figura.docs.itemstack.id": "包含该ItemStack指向的物品的ID",
    "figura.docs.itemstack.tag": "包含该ItemStack的NBT标签的表\n如果该ItemStack没有NBT标签，则为nil",
    "figura.docs.itemstack.get_id": "获取该ItemStack的ID",
    "figura.docs.itemstack.get_tag": "获取该ItemStack的NBT标签的表",
    "figura.docs.itemstack.get_count": "获取该ItemStack的数量",
    "figura.docs.itemstack.get_damage": "获取该ItemStack的损坏值\n对于工具之类的或有耐久条的东西有效",
    "figura.docs.vanilla_model.helmet_head": "头盔模型的内层",
    "figura.docs.itemstack.get_pop_time": "获取该ItemStack的剩余拾取动画时间，以Tick为单位。该值是物品进入玩家快捷栏时物品呈现的简短拉伸动画的剩余时间",
    "figura.docs.itemstack.has_glint": "如果该物品有光效（Glint，一般来自魔咒）则返回true",
    "figura.docs.itemstack.get_tags": "以列表的形式获取该ItemStack的所有标签，值为标签的字符串形式",
    "figura.docs.itemstack.is_block_item": "如果该ItemStack表示一个方块则返回true",
    "figura.docs.itemstack.is_food": "如果该物品可食用则返回true",
    "figura.docs.itemstack.get_use_action": "返回使用该ItemStack时的动画名称\n（参见枚举中的`use_actions`）",
    "figura.docs.itemstack.get_name": "获取该ItemStack的名称",
    "figura.docs.itemstack.get_max_count": "获取该ItemStack的最大堆叠数",
    "figura.docs.itemstack.get_rarity": "获取该ItemStack的稀有度\n常见对应白色，少见对应黄色，稀有对应青色，史诗对应品红色",
    "figura.docs.itemstack.is_enchantable": "返回该ItemStack是否可在附魔台中附魔",
    "figura.docs.itemstack.get_max_damage": "获取该ItemStack的最大耐久度",
    "figura.docs.itemstack.is_damageable": "如果该ItemStack有耐久度则返回ture",
    "figura.docs.itemstack.is_stackable": "如果该ItemStack可堆叠则返回ture",
    "figura.docs.itemstack.get_repair_cost": "获取该ItemStack在铁砧中的累积惩罚",
    "figura.docs.itemstack.get_use_duration": "获取使用该ItemStack所需的Tick数\n目前主要是食物类需要获取\n除了海带以外的食物都是32，只有海带为16",
    "figura.docs.itemstack.to_stack_string": "将该ItemStack转换为字符串，与在命令中的使用的一样",
    "figura.docs.itemstack.is_armor": "检查该ItemStack是否为盔甲",
    "figura.docs.itemstack.is_tool": "检查该ItemStack是否为工具",
    "figura.docs.itemstack.get_equipment_slot": "如果该ItemStack用于的槽位",
    "figura.docs.itemstack.copy": "返回该ItemStack的副本",
    "figura.docs.itemstack.get_blockstate": "返回该ItemStack的BlockState形式\n如果该ItemStack没有对应的BlockState形式，则返回nil",
    "figura.docs.keybinds": "全局API，包含用于创建新Keybind（键绑定）实例的函数",
    "figura.docs.keybinds.new_keybind": "创建并返回一个新Keybind\n名称在键绑定菜单中使用\n参数中的“key”是一个按键的ID，例如`key.keyboard.r`\n布尔值“gui”表示该键绑定是否总是有效还是仅未打开屏幕时有效\n对于按键的ID，参见枚举中的`keybinds`",
    "figura.docs.keybinds.from_vanilla": "基于一个原版的键创建键绑定",
    "figura.docs.keybinds.get_vanilla_key": "获取某个按键绑定的按键ID\n对于按键的ID，参见枚举中的`keybinds`；对于按键绑定，参见`key_ids`",
    "figura.docs.keybinds.get_keybinds": "获取已注册的所有键绑定的表",
    "figura.docs.keybind": "代表脚本中的一个键绑定\n实例是通过KeybindAPI的`newKeybind()`和`fromVanilla()`创建的",
    "figura.docs.keybind.press": "当按下该键时运行的函数\n该函数有一个参数\n第一个参数是按下的修饰键的位掩码\nShift = 1, Ctrl = 2, Alt = 4\n第二个参数是该键绑定本身\n如果返回true，则所有使用相同按键的原版键绑定都将被忽略",
    "figura.docs.keybind.release": "当释放该键时运行的函数\n该函数有一个参数\n第一个参数是按下的修饰键的位掩码\nShift = 1, Ctrl = 2, Alt = 4\n第二个参数是该键绑定本身\n如果返回true，则所有使用相同按键的原版键绑定都将被忽略",
    "figura.docs.keybind.set_on_press": "设置当按下该键时运行的函数\n该函数有一个参数\n第一个参数是按下的修饰键的位掩码\nShift = 1, Ctrl = 2, Alt = 4\n第二个参数是该键绑定本身",
    "figura.docs.keybind.set_on_release": "设置当释放该键时运行的函数\n该函数有一个参数\n第一个参数是按下的修饰键的位掩码\nShift = 1, Ctrl = 2, Alt = 4\n第二个参数是该键绑定本身",
    "figura.docs.keybind.set_key": "设置该键绑定的按键",
    "figura.docs.keybind.is_default": "检查该键是否为默认状态（没有在键绑定菜单中修改）",
    "figura.docs.keybind.get_key": "获取该键绑定的按键",
    "figura.docs.keybind.get_key_name": "获取该键绑定的键的名称",
    "figura.docs.keybind.get_name": "获取该键绑定的名称，其为创建键绑定时所设置的",
    "figura.docs.keybind.get_id": "返回该键绑定的数字ID",
    "figura.docs.keybind.is_pressed": "获取该键当前是否被按下",
    "figura.docs.keybind.is_enabled": "返回该键绑定是否已被开启\n另见`setEnabled`",
    "figura.docs.keybind.set_enabled": "切换该键绑定是否应被处理",
    "figura.docs.keybind.is_gui_enabled": "返回该键绑定是否能在GUI中工作（聊天、物品栏等）",
    "figura.docs.keybind.set_gui": "设置该键绑定是否能在GUI中工作",
    "figura.docs.vanilla_model": "全局API，提供与原版玩家模型及其部件交互的函数\n通过`vanilla_model`访问",
    "figura.docs.vanilla_model.head": "玩家的头，不包括帽子（即第二层/外层）",
    "figura.docs.vanilla_model.body": "玩家的躯干，不包括外套（即第二层/外层）",
    "figura.docs.vanilla_model.left_arm": "玩家的左臂，不包括左袖（即第二层/外层）",
    "figura.docs.vanilla_model.right_arm": "玩家的右臂，不包括右袖（即第二层/外层）",
    "figura.docs.vanilla_model.left_leg": "玩家的左腿，不包括左裤腿（即第二层/外层）",
    "figura.docs.vanilla_model.right_leg": "玩家的右腿，不包括右裤腿（即第二层/外层）",
    "figura.docs.vanilla_model.hat": "玩家的帽子（即头部第二层/外层）",
    "figura.docs.vanilla_model.jacket": "玩家的外套（即躯干第二层/外层）",
    "figura.docs.vanilla_model.left_sleeve": "玩家的左袖（即左臂第二层/外层）",
    "figura.docs.vanilla_model.right_sleeve": "玩家的右袖（即右臂第二层/外层）",
    "figura.docs.vanilla_model.left_pants": "玩家的左裤腿（即左腿第二层/外层）",
    "figura.docs.vanilla_model.right_pants": "玩家的右裤腿（即右腿第二层/外层）",
    "figura.docs.vanilla_model.cape_model": "原版披风模型",
    "figura.docs.vanilla_model.fake_cape": "一个披风的自定义复制品，尝试储存披风的变换，因为原版披风有些怪异……",
    "figura.docs.vanilla_model.helmet": "多部件：头盔模型",
    "figura.docs.vanilla_model.helmet_item": "在头盔槽的物品",
    "figura.docs.vanilla_model.helmet_hat": "头盔模型的外层",
    "figura.docs.vanilla_model.boots_right_leg": "靴子模型的右靴",
    "figura.docs.vanilla_model.elytra": "多部件：鞘翅模型",
    "figura.docs.vanilla_model.left_elytra": "鞘翅模型的左翼",
    "figura.docs.vanilla_model.right_elytra": "鞘翅模型的右翼",
    "figura.docs.vanilla_model.held_items": "多部件：玩家手中的物品",
    "figura.docs.vanilla_model.left_item": "玩家左手中的物品",
    "figura.docs.vanilla_model.right_item": "玩家右手中的物品",
    "figura.docs.vanilla_model.parrots": "多部件：玩家肩膀上的鹦鹉",
    "figura.docs.vanilla_model.left_parrot": "玩家左肩上的鹦鹉",
    "figura.docs.vanilla_model.right_parrot": "玩家右肩上的鹦鹉",
    "figura.docs.vanilla_model.all": "多部件：整个原版模型",
    "figura.docs.vanilla_model.chestplate": "多部件：胸甲模型",
    "figura.docs.vanilla_model.chestplate_body": "胸甲模型的躯干部分",
    "figura.docs.vanilla_model.chestplate_left_arm": "胸甲模型的左臂部分",
    "figura.docs.vanilla_model.chestplate_right_arm": "胸甲模型的右臂部分",
    "figura.docs.vanilla_model.leggings": "多部件：护腿模型",
    "figura.docs.vanilla_model.leggings_body": "护腿模型的躯干部分",
    "figura.docs.vanilla_model.leggings_left_leg": "护腿模型的左腿部分",
    "figura.docs.vanilla_model.leggings_right_leg": "护腿模型的右腿部分",
    "figura.docs.vanilla_model.boots": "多部件：靴子模型",
    "figura.docs.vanilla_model.boots_left_leg": "靴子模型的左靴",
    "figura.docs.vanilla_model.outer_layer": "多部件：玩家模型的外层",
    "figura.docs.vanilla_model.inner_layer": "多部件：玩家模型的内层",
    "figura.docs.vanilla_model.armor": "多部件：所有盔甲模型",
    "figura.docs.vanilla_model.player": "多部件：玩家模型的内外层皮肤以及披风",
    "figura.docs.json": "包含处理JSON功能的全局API",
    "figura.docs.json.new_builder": "创建一个新的JSON序列化器的构建器",
    "figura.docs.json.new_array": "创建一个新JSON数组",
    "figura.docs.json.new_object": "创建一个新JSON对象",
    "figura.docs.json.is_serializable": "检查某个特定值是否能被序列化",
    "figura.docs.json_builder": "JSON序列化器构建器",
    "figura.docs.json_builder.pretty_printing": "序列化器是否应为对象和数组应用缩进，默认：false",
    "figura.docs.json_builder.html_escaping": "序列化器是否应转义非ASCII字符，默认：true",
    "figura.docs.json_builder.serialize_nils": "序列化器是否应该序列化或将被放在JSON对象和数组中的nil，默认：false",
    "figura.docs.json_builder.build": "使用当前设置构建序列化器",
    "figura.docs.json_serializer": "用于序列化和反序列化具有特定设置的JSON字符串的对象",
    "figura.docs.json_serializer.serialize": "将提供的值序列化为JSON字符串",
    "figura.docs.json_serializer.deserialize": "将提供的JSON字符串反序列化为Lua值",
    "figura.docs.json_array": "JSON数组，基本上是一个表，但语法更严格，以匹配JSON数组",
    "figura.docs.json_array.get": "返回给定索引下的值",
    "figura.docs.json_array.size": "返回该数组的大小",
    "figura.docs.json_array.contains": "检查该数组是否包含特定的值",
    "figura.docs.json_array.add": "向该数组添加特定的值",
    "figura.docs.json_array.insert": "在数组的指定索引处插入所提供的值",
    "figura.docs.json_array.set": "将数组中特定索引下的值设置为给定值",
    "figura.docs.json_array.remove_at": "移除该数组中特定索引下的值",
    "figura.docs.json_array.remove": "从该数组中移除特定值",
    "figura.docs.json_array.index_of": "返回给定值在该数组中的第一个索引",
    "figura.docs.json_array.last_index_of": "返回给定值在该数组中的最后一个索引",
    "figura.docs.json_array.clear": "清空该数组",
    "figura.docs.json_object": "JSON对象，基本上是一个表，但语法更严格，以匹配JSON对象",
    "figura.docs.json_object.size": "返回该对象的大小",
    "figura.docs.json_object.get": "返回与指定键绑定的值。与普通Lua表不同，对象可以包含nil值，可以考虑先使用`containsKey`",
    "figura.docs.json_object.contains_key": "该对象是否包含特定的键",
    "figura.docs.json_object.put": "将提供的值放入指定键中",
    "figura.docs.json_object.remove": "从对象中移除特定键的值",
    "figura.docs.json_object.clear": "清空该对象",
    "figura.docs.json_object.contains_value": "该对象是否包含特定的值",
    "figura.docs.future": "包含不能立即完成的操作的结果的对象",
    "figura.docs.future.is_done": "检查Future是否已经完成，要么成功要么有报错",
    "figura.docs.future.has_error": "检查Future执行时是否发生错误",
    "figura.docs.future.get_value": "返回该Future对象的值，前提是该Future成功执行",
    "figura.docs.future.get_or_error": "如果在执行此Future时发生错误，则抛出错误，否则返回值",
    "figura.docs.future.throw_error": "如果在执行该Future时发生错误，则抛出错误",
    "figura.docs.vanilla_model.cape": "多部件：玩家的斗篷",
    "figura.docs.vanilla_part.get_scale": "获取该部件的缩放\n返回通过`setScale`设置的值",
    "figura.docs.vanilla_model_part": "代表原版模型中的模型部件\n可查询原版变换值",
    "figura.docs.vanilla_model_part.get_origin_visible": "在不受脚本干扰的情况下，获取该原版模型部件是否可见",
    "figura.docs.vanilla_model_part.get_origin_rot": "获取Minecraft当前应用于该原版模型部件的旋转角度",
    "figura.docs.input_stream": "一个数据输入流",
    "figura.docs.input_stream.read": "从该输入流中读取一个字节。如果输入流是异步的，则可能会出错",
    "figura.docs.input_stream.read_async": "开始从该输入流中读取特定数量的字节，返回一个Future，读取完成后将包含字节数组",
    "figura.docs.input_stream.skip": "跳过输入流中特定数量的字节，返回实际跳过的字节数",
    "figura.docs.input_stream.close": "关闭该输入流",
    "figura.docs.file": "包含处理文件功能的全局API",
    "figura.docs.file.is_path_allowed": "检查是否允许使用该路径",
    "figura.docs.file.allowed": "检查该Avatar是否可以使用 FileAPI",
    "figura.docs.file.exists": "检查指定路径下的文件/目录是否存在",
    "figura.docs.file.is_file": "检查指定路径是否为文件",
    "figura.docs.file.is_directory": "检查指定路径是否为目录",
    "figura.docs.file.open_read_stream": "为指定路径下的文件打开输入流",
    "figura.docs.file.open_write_stream": "为指定路径下的文件打开输出流",
    "figura.docs.file.read_string": "以字符串形式读取整个文件",
    "figura.docs.http_request_builder.get_uri": "返回该请求的URI",
    "figura.docs.http_request_builder.get_method": "返回该请求的方法（Method）",
    "figura.docs.http_request_builder.get_body": "返回该请求的正文（Body）",
    "figura.docs.http_request_builder.get_headers": "返回包含为该请求设置的所有报头（Header）的表格",
    "figura.docs.http_request_builder.send": "发送该请求并返回Future对象，请求完成后将包含`httpResponse`对象",
    "figura.docs.socket.is_closed": "检查该Socket是否已关闭",
    "figura.docs.socket.close": "关闭该Socket",
    "figura.docs.nameplate_entity.get_scale": "获取名称标签的缩放系数",
    "figura.docs.text_task.has_outline": "检查该任务的文本是否有轮廓线",
    "figura.docs.text_task.set_outline": "设置该任务的文本是否有轮廓线\n如果给文本添加了轮廓线，它将始终以全亮度呈现\n与`shadow`和`Emissive`模式不兼容",
    "figura.docs.text_task.get_outline_color": "获取该任务的文本轮廓线颜色",
    "figura.docs.text_task.set_outline_color": "设置该任务的文本轮廓线颜色\n仅兼容`Outline`模式",
    "figura.docs.text_task.get_width": "获取该文本的最大宽度\n默认为0",
    "figura.docs.text_task.set_width": "设置该文本的最大宽度，超出时换行成多行\n小于等于0的宽度不会对文本进行换行\n默认为0",
    "figura.docs.text_task.has_wrap": "检查该文本是否应换行",
    "figura.docs.text_task.set_wrap": "设置该文本是否应换行",
    "figura.docs.vanilla_part": "一个`VanillaModelPart`和`VanillaGroupPart`的抽象超类\nThis part can be transformed similar to custom model parts, however not with the same extent",
    "figura.docs.vanilla_part.get_visible": "获取该部件是否可见",
    "figura.docs.vanilla_part.set_visible": "将该部件设置为可见或不可见",
    "figura.docs.vanilla_part.get_pos": "获取该部件设置的位置\n返回通过`setPos`设置的值",
    "figura.docs.vanilla_part.set_pos": "设置该部件的位置",
    "figura.docs.vanilla_part.get_rot": "获取该部件的旋转\n返回通过`setRot`设置的值",
    "figura.docs.vanilla_part.get_offset_scale": "获取该部件的缩放乘数",
    "figura.docs.nameplate_customization": "可应用于名称的自定义",
    "figura.docs.nameplate_customization.get_text": "获取用于名称的文本",
    "figura.docs.nameplate_customization.set_text": "将名称设置为给定文本",
    "figura.docs.nameplate_entity": "针对实体的名称自定义",
    "figura.docs.nameplate_entity.get_pivot": "获取名称标签的枢轴点，相对于以玩家脚底为中心的世界坐标系\n（仅在调用`setPivot`后不为nil，默认值等价于但不是`{0,0,0}`",
    "figura.docs.nameplate_entity.set_pivot": "设置名称标签的枢轴点，相对于以玩家脚底为中心的世界坐标系\n（默认等价于`{0,2.3,0}`）",
    "figura.docs.nameplate_entity.get_pos": "获取名称标签的坐标偏移量，相对于名称标签枢轴点的世界坐标系\n（仅在调用`setPos`后不为nil，默认值等价于但不是`{0,0,0}`",
    "figura.docs.nameplate_entity.set_pos": "设置名称标签的坐标偏移量，相对于名称标签枢轴点的世界坐标系\n（默认等价于`{0,0,0}`）",
    "figura.docs.nameplate_entity.set_scale": "设置名称标签的缩放系数",
    "figura.docs.nameplate_entity.get_background_color": "获取名称标签背景的颜色",
    "figura.docs.nameplate_entity.set_background_color": "设置名称标签背景的颜色\n如果不给定alpha，则使用原版的值（在辅助功能设置中）",
    "figura.docs.nameplate_entity.set_outline_color": "设置轮廓模式下轮廓线使用的颜色",
    "figura.docs.nameplate_entity.get_light": "获取光照等级覆盖值",
    "figura.docs.nameplate_entity.set_light": "设置光照等级覆盖值\n值为0到15，表示方块光照等级和天空光照等级\n传入nil会重置光照等级覆盖",
    "figura.docs.nameplate_entity.is_visible": "获取名称标签是否应被渲染",
    "figura.docs.nameplate_entity.set_visible": "设置名称标签是否应被渲染",
    "figura.docs.nameplate_entity.has_shadow": "获取名称标签是否有文本阴影",
    "figura.docs.nameplate_entity.set_shadow": "设置名称标签是否应被渲染\n与`outline`（轮廓）冲突",
    "figura.docs.nameplate_entity.has_outliner": "获取名称标签是否有轮廓线",
    "figura.docs.nameplate_entity.set_outline": "设置名称标签是否应有轮廓线\n与`shadow`（阴影）冲突",
    "figura.docs.nameplate_group": "名称自定义组，包含其他名称自定义",
    "figura.docs.nameplate_group.set_text": "设置所有子名称自定义的文本",
    "figura.docs.pings": "专用于注册和调用ping的全局 API",
    "figura.docs.ping_function": "使用网络数据包装的自定义函数",
    "figura.docs.raycast": "全局API，提供射线投射功能（Raycast）",
    "figura.docs.raycast.aabb": "进行射线投射，基于一个起点，一个终点，以及一组由玩家定义的轴对齐边界箱\n每一个轴对齐边界箱为一个表，索引1和2为Vector3\n`{vec(0,0,0),vec(1,0.5,1)}`是一个有效的轴对齐边界箱，而`{ {vec(0,0,0),vec(1,0.5,1)}, {vec(0,0.5,0.5),vec(1,1,1)} }`是有效的一组轴对齐边界箱\n返回被击中的轴对齐边界箱，以Vector3表示准确的击中坐标，字符串表示的被击中的轴对齐边界箱所被击中的面，如果在其内部则为nil，以及被击中轴对齐边界箱在组里面的索引\n（“AABB”的全称为“Axis-Aligned Bounding Box”，即“轴对齐边界箱”）",
    "figura.docs.raycast.block": "对世界中的方块进行射线投射\n如果成功，返回击中的BlockState，以Vector3表示的准确的击中坐标以及方块的哪个面被击中\n不成功则返回nil\n“blockCastType”和“fluidCastType”决定射线投射如何处理方块形状和流体.\n如果为nil则默认为`COLLIDER`（碰撞箱）和`NONE`",
    "figura.docs.raycast.entity": "对世界中的实体进行射线投射\n如果成功，返回击中的EntityAPI和以Vector3表示的准确的击中坐标\n不成功则返回nil\n“predicate”是一个函数，用于防止特定实体被判定\n向其传入一个EntityAPI对象，返回true表示实体有效，false表示无效\n当为nil时将所有实体标记为有效\n（等效于`function() return true end`）",
    "figura.docs.item_task": "渲染物品的任务",
    "figura.docs.item_task.set_item": "设置该渲染任务的物品",
    "figura.docs.item_task.get_display_mode": "获取该任务的物品渲染模式",
    "figura.docs.item_task.set_display_mode": "设置该任务的物品渲染模式",
    "figura.docs.block_task": "渲染方块的任务",
    "figura.docs.block_task.set_block": "设置该渲染任务的方块",
    "figura.docs.text_task": "渲染文本的任务",
    "figura.docs.text_task.get_text": "获取该任务的文本",
    "figura.docs.text_task.set_text": "设置该任务的文本",
    "figura.docs.text_task.get_alignment": "返回文本对齐方式\n默认为`LEFT`，即左对齐",
    "figura.docs.text_task.set_alignment": "设置文本对齐方式\n可以是`LEFT`（左对齐）、`RIGHT`（右对齐）或`CENTER`（中心对齐）\n默认为`LEFT`，即左对齐",
    "figura.docs.text_task.has_shadow": "检查该任务的文本是否有阴影",
    "figura.docs.text_task.set_shadow": "设置该任务的文本是否有阴影\n与`Outline`（轮廓）模式不兼容",
    "figura.docs.text_task.is_see_through": "检查该文本是否可以穿墙看见\n默认为false",
    "figura.docs.text_task.set_see_through": "设置该文本是否可以穿墙看见\n默认为false",
    "figura.docs.text_task.has_background": "检查该文本是否渲染其背景\n默认为false",
    "figura.docs.text_task.set_background": "设置该文本是否渲染其背景\n默认为false",
    "figura.docs.text_task.get_background_color": "获取该文本的背景颜色",
    "figura.docs.text_task.set_background_color": "设置该文本的背景颜色\n如果不给定alpha，则使用原版的值（在辅助功能设置中）",
    "figura.docs.text_task.get_opacity": "获取文本的不透明度",
    "figura.docs.text_task.set_opacity": "设置文本的不透明度",
    "figura.docs.vanilla_part.set_rot": "设置该部件的旋转",
    "figura.docs.vanilla_part.get_offset_rot": "获取该部件的旋转偏移量",
    "figura.docs.vanilla_part.set_offset_rot": "设置该部件的旋转偏移量，在原版值的基础上相加",
    "figura.docs.vanilla_part.set_scale": "设置该部件的缩放",
    "figura.docs.vanilla_part.set_offset_scale": "设置该部件的缩放乘数，与原版的值相乘",
    "figura.docs.vanilla_model_part.get_origin_pos": "获取Minecraft当前应用于该原版模型部件的位置偏移量",
    "figura.docs.vanilla_model_part.get_origin_scale": "获取Minecraft当前应用于该原版模型部件的缩放",
    "figura.docs.vanilla_group_part": "代表原版模型中的一组模型部件\n用于方便地操作一组部件\n所有的更改也应用于子部件",
    "figura.docs.vanilla_group_part.set_visible": "设置该部件和子部件的可见性",
    "figura.docs.vanilla_group_part.set_pos": "设置该部件和子部件的位置",
    "figura.docs.vanilla_group_part.set_rot": "设置该部件和子部件的旋转",
    "figura.docs.vanilla_group_part.set_offset_rot": "设置该部件和子部件的旋转偏移量，在原版值的基础上相加",
    "figura.docs.vanilla_group_part.set_scale": "设置该部件和子部件的缩放",
    "figura.docs.vanilla_group_part.set_offset_scale": "设置该部件和子部件的缩放乘数，与原版的值相乘",
    "figura.docs.input_stream.available": "返回可获取的字节数",
    "figura.docs.input_stream.mark": "标记输入流中当前的位置",
    "figura.docs.input_stream.reset": "重置输入流的位置到标记处",
    "figura.docs.input_stream.mark_supported": "该输入流是否支持标记",
    "figura.docs.input_stream.is_async_only": "该输入流是否为仅异步的",
    "figura.docs.input_stream.transfer_to": "将输入流中的剩余数据传输到提供的输出流中",
    "figura.docs.output_stream": "一个数据输出流",
    "figura.docs.output_stream.write": "向该输出流写入一个字节",
    "figura.docs.output_stream.close": "关闭该输出流.",
    "figura.docs.output_stream.flush": "将数据刷入输出流",
    "figura.docs.file.write_string": "向文件中写入一个字符串",
    "figura.docs.file.write": "以特定Provider向文件写入值",
    "figura.docs.file.read": "以特定Reader从文件读取值",
    "figura.docs.file.mkdir": "在指定路径下创建目录，如果目录成功创建则返回true\n（不能在不存在的目录中创建目录，如果需要一次性创建多层目录，另见`mkdirs`）",
    "figura.docs.file.mkdirs": "在指定路径下创建目录，包括所有的父目录，如果目录成功创建则返回true",
    "figura.docs.file.delete": "删除特定路径下的文件/目录，如果成功则返回true",
    "figura.docs.file.list": "列出特定路径下的所有文件和目录，如果目录不存在或路径不是一个目录则返回nil",
    "figura.docs.resources.get_paths": "返回该Avatar存储的所有资源的路径的表",
    "figura.docs.resources.get": "返回指定路径下资源数据的输入流",
    "figura.docs.net": "包含网络通信相关功能的全局API",
    "figura.docs.net.http": "HttpAPI的实例",
    "figura.docs.net.socket": "SocketAPI的实例",
    "figura.docs.net.is_networking_allowed": "检查你的Avatar是否可以使用网络相关功能，如果没有在设置中启用则永远为false",
    "figura.docs.net.is_link_allowed": "检查指定链接是否允许在NetworkingAPI中使用",
    "figura.docs.http": "包含HTTP相关功能的全局API",
    "figura.docs.http.request": "为特定的URI（统一资源标识符）创建请求构建器（Request Builder）",
    "figura.docs.http_request_builder": "一个HTTP请求的构建器",
    "figura.docs.http_request_builder.uri": "设置该请求的URI，返回自身以链式调用",
    "figura.docs.http_request_builder.method": "设置该请求的方法（Method），返回自身以链式调用。如果方法是nil则使用默认值`GET`",
    "figura.docs.http_request_builder.body": "设置该请求的正文（Body），返回自身以链式调用。如果数据为空，请求将不带正文发送",
    "figura.docs.http_request_builder.header": "设置该请求的报头（Header），返回自身以链式调用。如果值为nil则报头会被移除",
    "figura.docs.http_response": "包含HTTP响应的对象",
    "figura.docs.http_response.get_data": "返回包含响应数据的输入流",
    "figura.docs.http_response.get_response_code": "返回响应状态码（Response Code）",
    "figura.docs.http_response.get_headers": "返回该响应的标头",
    "figura.docs.socket_api": "用于处理TCP Socket的全局API",
    "figura.docs.socket_api.open": "打开与指定主机和端口的连接，返回包含Socket的Future",
    "figura.docs.socket": "一个TCP Socket",
    "figura.docs.socket.get_input_stream": "返回绑定到该Socket的输入流",
    "figura.docs.socket.get_output_stream": "返回绑定到该Socket的输出流",
    "figura.docs.socket.get_port": "返回该Socket连接到的端口",
    "figura.docs.socket.get_host": "返回该Socket连接到的主机",
    "figura.docs.socket.is_connected": "检查该Socket是否已连接",
    "figura.network.header_disabled": "“%s”报头被禁用，跳过中！",
    "figura.docs.sprite_task.set_dimensions": "设置纹理的尺寸",
    "figura.docs.textures.copy": "创建一个纹理的副本\n副本以给定的名称注册",
    "figura.docs.nameplate": "全局API，用于自定义你在聊天栏、头上以及玩家列表中的玩家名称",
    "figura.docs.nameplate.chat": "用于聊天名称的自定义",
    "figura.docs.nameplate.entity": "用于玩家名称标签的自定义",
    "figura.docs.nameplate.list": "用于玩家列表的名称的自定义",
    "figura.docs.nameplate.all": "一次性管理所有名称自定义的组",
    "figura.docs.particles": "用于处理Minecraft粒子的全局API\n粒子实例是通过将ID作为索引创建的\n通过`particles`访问",
    "figura.docs.particles.new_particle": "以给定名称，在给定坐标处，以给定速度创建一个粒子\n一些粒子有特殊的属性，比如`dust`粒子\n对于某些粒子，特殊属性可以放进“name”参数中，与`/particle`命令相同",
    "figura.docs.particles.remove_particles": "移除该Avatar生成的所有粒子",
    "figura.docs.particles.is_present": "检查该粒子ID是否已被注册",
    "figura.docs.particle": "代表一个可以生成和修改的粒子\n通过索引`ParticleAPI`获取\n作为`particle:addParticle()`的一种面向对象的替代形式存在",
    "figura.docs.particle.spawn": "以当前属性生成该粒子",
    "figura.docs.particle.remove": "从世界中移除该粒子",
    "figura.docs.particle.is_alive": "检查该粒子是否未被标记为要清除",
    "figura.docs.particle.get_pos": "获取该粒子的坐标",
    "figura.docs.particle.set_pos": "设置该粒子的坐标\n坐标以世界坐标系表示",
    "figura.docs.particle.get_velocity": "获取该粒子的速度",
    "figura.docs.particle.set_velocity": "设置该粒子的速度\n速度以世界坐标系表示",
    "figura.docs.particle.get_color": "获取该粒子的颜色",
    "figura.docs.particle.set_color": "设置该粒子的颜色\n接受透明度，但大多数粒子不支持\n默认RGBA为1",
    "figura.docs.particle.get_lifetime": "获取粒子当前的寿命",
    "figura.docs.particle.set_lifetime": "设置粒子的寿命，也就是粒子应该在世界中停留的时间",
    "figura.docs.particle.get_power": "获取该粒子的“power”\n（作用未知）",
    "figura.docs.particle.set_power": "设置该粒子的“power”\n（作用未知）",
    "figura.docs.particle.get_scale": "获取该粒子的缩放",
    "figura.docs.particle.set_scale": "设置该粒子的缩放",
    "figura.docs.particle.get_gravity": "获取粒子的重力",
    "figura.docs.particle.set_gravity": "设置粒子的重力",
    "figura.docs.particle.has_physics": "获取该粒子是否有物理效果",
    "figura.docs.particle.set_physics": "设置该粒子是否有物理效果",
    "figura.docs.sprite_task": "一个渲染单个精灵图的任务",
    "figura.docs.sprite_task.get_texture": "返回该任务的纹理",
    "figura.docs.sprite_task.set_texture": "设置该任务的纹理\n如果纹理是一个路径则纹理的宽度和高度必须给定\n对于自定义纹理，尺寸是可选的",
    "figura.docs.sprite_task.get_dimensions": "返回纹理的尺寸，用于UV计算",
    "figura.docs.sprite_task.get_size": "返回用于渲染该精灵图的宽度和高度",
    "figura.docs.sprite_task.set_size": "设置用于渲染该精灵图的宽度和高度",
    "figura.docs.sprite_task.get_region": "获取纹理的UV区域",
    "figura.docs.sprite_task.set_region": "设置纹理的UV区域\n用其尺寸计算最大UV",
    "figura.docs.sprite_task.get_uv": "获取纹理的UV偏移",
    "figura.docs.sprite_task.set_uv": "设置纹理的UV偏移\nUV区域和纹理尺寸用于计算末端UV",
    "figura.docs.sprite_task.get_uv_pixels": "基于纹理的尺寸，以像素为单位返回该纹理的UV偏移",
    "figura.docs.sprite_task.get_render_type": "获取精灵图的渲染模式",
    "figura.docs.sprite_task.set_uv_pixels": "基于纹理的尺寸，以像素为单位设置该纹理的UV偏移",
    "figura.docs.sprite_task.get_color": "获取该精灵图当前的颜色乘数\n值为0到1的RGBA",
    "figura.docs.sprite_task.set_color": "设置该精灵图当前的颜色乘数\n值为0到1的RGBA\n默认值为{1,1,1,1}，Alpha是可选的",
    "figura.docs.sprite_task.set_render_type": "设置精灵图的渲染模式\n默认为`TRANSLUCENT`\n另见枚举中的`render_modes`",
    "figura.docs.sprite_task.get_vertices": "返回包含该精灵图四个顶点的表\n通过其他函数改变值会重置这些顶点",
    "figura.docs.entity_task": "一个渲染实体的任务",
    "figura.docs.entity_task.as_entity": "返回与该任务相关联的实体，如果由于某种原因实体不存在，则返回nil\n由于特殊情况，一些后续的返回值可能完全无用",
    "figura.docs.entity_task.set_nbt": "设置实体的NBT",
    "figura.docs.entity_task.update_walking_distance": "如果适用，以给定信息更新行走动画。为了达到预期效果，应当在每一Tick以适当的值调用该函数",
    "figura.docs.entity_task.set_head_rotation": "如果适用，更新实体头部的旋转",
    "figura.docs.sounds": "一个全局API，用于播放Minecraft音效\n通过`sounds`访问",
    "figura.docs.sounds.play_sound": "在特定坐标，以给定音量和音高播放指定音效\n音效ID要么是标识符，要么是自定义音效名称\n音量在Minecraft中表示人们可以从多远处听到该音效，而不是实际的响度\n如果你不给定音量和音高，它们将默认为1",
    "figura.docs.sounds.stop_sound": "停止该Avatar播放的音效\n如果指定了ID，则仅停止该ID对应的音效",
    "figura.docs.sounds.new_sound": "为Avatar注册一个新自定义音效\n第一个参数是音效ID，第二个参数是表示音效数据的字节数组或Base64字符串",
    "figura.docs.sounds.is_present": "检查该音效ID是否已被Avatar自定义音效或原版音效注册",
    "figura.docs.sounds.get_custom_sounds": "返回所有已注册自定义音效的ID的表",
    "figura.docs.sound": "表示一个可播放的音效\n通过索引SoundAPI获取\n作为`sounds:playSound()`的一种面向对象的替代形式存在",
    "figura.docs.sound.is_playing": "检查是否正在播放该音效",
    "figura.docs.sound.pause": "暂停该音效的播放",
    "figura.docs.sound.stop": "停止该音效的播放",
    "figura.docs.sound.get_pos": "获取该音效的坐标",
    "figura.docs.sound.set_pos": "设置该音效的坐标\n坐标以世界坐标系表示\n默认为{0,0,0}",
    "figura.docs.sound.get_volume": "获取该音效的音量",
    "figura.docs.sound.set_volume": "设置该音效的音量\n默认为1",
    "figura.docs.sound.get_attenuation": "获取该音效的衰减",
    "figura.docs.sound.set_attenuation": "设置该音效的衰减\n默认为1",
    "figura.docs.sound.get_pitch": "获取该音效的音高",
    "figura.docs.sound.set_pitch": "设置该音效的音高\n默认值为1",
    "figura.docs.sound.is_looping": "检查该音效是否循环播放",
    "figura.docs.sound.set_loop": "设置该音效是否循环播放\n默认为false",
    "figura.docs.sound.get_subtitle": "获取该音效的字幕文本",
    "figura.docs.sound.set_subtitle": "设置该音效的字幕文本",
    "figura.docs.textures": "可在运行时创建纹理的全局API",
    "figura.docs.textures.new_texture": "以给定名称，宽度和高度创建一个纹理\n纹理由纯色填充",
    "figura.docs.textures.read": "从一个Base64字符串或字节数组中读取一个纹理",
    "figura.docs.textures.get": "基于它的名称获取一个已注册的纹理，如果没有找到则为nil",
    "figura.docs.textures.get_textures": "返回该Avatar所有所用纹理的表\n不包括通过该API生成的纹理",
    "figura.docs.textures.from_vanilla": "以纹理对象的形式返回该纹理的副本，以便修改",
    "figura.docs.texture": "一个纹理对象，要么从模型自动生成，要么通过TextureAPI创建\n（“材质”是对“Texture”的错误翻译）",
    "figura.docs.texture.get_name": "返回该纹理的名称",
    "figura.docs.texture.get_path": "返回该纹理资源路径的位置",
    "figura.docs.texture.get_dimensions": "返回表示该纹理的宽度和高度的向量",
    "figura.docs.texture.get_pixel": "获取特定像素的RGBA颜色",
    "figura.docs.texture.set_pixel": "设置特定像素的RGBA颜色",
    "figura.docs.texture.fill": "将整个特定区域设置为指定RGBA颜色",
    "figura.docs.texture.update": "将纹理更新到GPU，应用所有更改",
    "figura.docs.texture.restore": "将纹理恢复到修改前的原始状态",
    "figura.docs.texture.save": "返回该纹理的Base64字符串表示形式",
    "figura.docs.texture.apply_func": "在该纹理的特定区域中调用给定的函数，它将遍历每一个像素，将当前的x、y和颜色作为参数传入，颜色是一个RGBA格式的Vector4，返回值将设置该像素的颜色\n无效返回值或nil不产生任何影响",
    "figura.docs.texture.apply_matrix": "以给定的矩阵变换该纹理特定区域内所有的像素\n如果`clip`为true，产生的颜色将被钳制到0和1之间",
    "figura.docs.texture_atlas": "一个纹理图集对象，以及有关的辅助函数",
    "figura.docs.texture_atlas.list_sprites": "返回该图集中所有精灵图的路径的表",
    "figura.docs.texture_atlas.get_sprite_uv": "返回包含给定精灵图的UV的Vector4\nUV的顺序为U0、V0、U1、V1",
    "figura.docs.texture_atlas.get_width": "返回该图集的宽度",
    "figura.docs.texture_atlas.get_height": "返回该图集的高度",
    "figura.docs.world": "专用于从Minecraft世界中读取信息的全局API\n通过`world`访问",
    "figura.docs.world.get_biome": "获取位于给定坐标处的生物群系",
    "figura.docs.world.get_block_state": "获取给定坐标处方块的BlockState\n如果没有被加载，则返回`void_air`",
    "figura.docs.world.is_loaded": "检查给定坐标处的区块是否已加载\n如果你需要访问某个方块，通常`getBlockState`会更有效率",
    "figura.docs.world.get_blocks": "获取特定区域内所有BlockState的列表\n区域最大尺寸为8*8*8",
    "figura.docs.world.get_redstone_power": "获取给定坐标处的方块的红石信号等级",
    "figura.docs.world.get_strong_redstone_power": "获取给定坐标处的方块的强充能红石信号等级",
    "figura.docs.world.get_time": "获取世界的游戏时间，以Tick为单位\n如果传入Delta，则会在时间上加上Delta\nDelta默认为0\n（几乎不受任何因素影响，永不停止增长）",
    "figura.docs.world.get_time_of_day": "获取当前的世界时间，以Tick为单位\n如果传入Delta，则会在时间上加上Delta\nDelta默认为0\n（一般而言是调试屏幕中所示的游戏日“Day n”乘24000再加上当前游戏日的时间，如果从未使用过`/time set`则应当与`getTime()`相等）",
    "figura.docs.world.get_day_time": "获取当前游戏日的时间，以Tick为单位，范围为[0,24000)\n如果传入Delta，则会在时间上加上Delta\nDelta默认为0\n（表示当前游戏日的时间，正常情况下每20分钟现实时间循环一次）",
    "figura.docs.world.get_day": "获取当前的游戏日\n如果传入Delta，它将考虑到Delta\nDelta默认为0\n（当前游戏总天数，为调试屏幕中的“Day n”。而Delta主要用于两游戏日之间的判断）",
    "figura.docs.world.get_moon_phase": "获取世界当前月相，以整数存储",
    "figura.docs.world.get_rain_gradient": "获取世界当前的降水梯度，从上一Tick插值到当前Tick\nDelta的默认值为1，表示当前Tick\n（完全晴朗时为0，降水时为1，中间的过渡阶段由0变化到1，反之亦然）",
    "figura.docs.world.is_thundering": "获取世界当前是否为雷暴天气",
    "figura.docs.world.get_light_level": "获取给定坐标处的光照等级",
    "figura.docs.world.get_sky_light_level": "获取给定坐标处的天空光照等级",
    "figura.docs.world.get_block_light_level": "获取给定坐标处的方块光照等级",
    "figura.docs.world.is_open_sky": "获取给定坐标处天空是否可见",
    "figura.docs.world.get_height": "通过提供的高度图返回给定坐标处的最高点\n如果不提供则默认为`MOTION_BLOCKING`（阻挡移动）",
    "figura.docs.world.get_dimension": "获取当前世界的维度名称",
    "figura.docs.world.get_entity": "从该UUID下的实体返回一个EntityAPI对象，如果未找到实体则为nil",
    "figura.docs.world.get_players": "返回包含世界中所有玩家的Player实例的表格\n玩家以他们的名称为索引",
    "figura.docs.world.avatar_vars": "返回所有已加载Avatar中通过`avatar:store()`存储的变量的表格\n该表以Avatar所有者的UUID为索引",
    "figura.docs.world.new_block": "从给定字符串中解析并创建一个BlockState\n可以给定一个世界坐标，用于依赖世界坐标的函数",
    "figura.docs.world.new_item": "从给定字符串中解析并创建一个ItemStack\n可以给定数量和损伤值，并应用到该ItemStack上",
    "figura.docs.world.exists": "检查当前世界是否存在\n大多数情况下都是ture，但在穿越维度等特殊情况时可能为false",
    "figura.docs.world.get_build_height": "返回世界的建筑高度下限和上限，以多个返回值",
    "figura.docs.world.get_spawn_point": "返回世界出生点的坐标向量",
    "figura.docs.sound.play": "播放该音效，或恢复暂停的音效",
    "figura.docs.matrices": "全局API，提供专门用于创建和以其他方式操作矩阵的函数\n通过`matrices`访问",
    "figura.docs.model_part.get_visible": "获取该部件是否可见\n默认值为nil，意味着在渲染时它将复制父部件的可见性",
    "figura.docs.model_part.set_visible": "设置该部件是否可见\n默认值为nil，意味着在渲染时它将复制父部件的可见性",
    "figura.docs.model_part.new_text": "在该部件上添加一个文本渲染任务（Text Render Task）",
    "figura.docs.model_part.get_all_vertices": "返回所有纹理的所有顶点的表",
    "figura.docs.model_part.move_to": "移动该部件，成为给定部件的子部件",
    "figura.docs.model_part.add_child": "将给定部件添加到该部件的子部件列表中",
    "figura.docs.model_part.remove_child": "从该部件的子部件列表中删除给定部件",
    "figura.docs.render_task": "代表Figura每帧要完成的渲染任务（Rendering Task）\n`ItemTask`、`BlockTask`和`TextTask`的抽象超类",
    "figura.docs.renderer": "全局API，提供可改变Minecraft渲染玩家的方式的函数",
    "figura.docs.renderer.render_fire": "着火时是否应在视觉上产生着火效果\n默认为true",
    "figura.docs.renderer.render_vehicle": "你的载具是否被渲染（船、矿车、马等等）\n默认为true",
    "figura.docs.renderer.render_crosshair": "切换是否渲染十字准星\n默认为true",
    "figura.docs.renderer.force_paperdoll": "切换是否无论玩家有没有动作都渲染纸娃娃\n如果纸娃娃被禁用或设置为始终渲染，则不会有任何变化\n默认为false",
    "figura.docs.renderer.render_hud": "切换是否渲染原版HUD\n不包括手臂和来自Figura的HUD",
    "figura.docs.renderer.should_render_fire": "检查着火效果是否应被渲染",
    "figura.docs.renderer.get_render_right_arm": "获取是否在第一人称时渲染右臂",
    "figura.docs.renderer.set_eye_offset": "设置实体眼睛位置的偏移，影响瞄准的方块和实体",
    "figura.docs.renderer.get_eye_offset": "返回实体眼睛位置的偏移，影响瞄准的方块和实体\n默认为nil",
    "figura.docs.renderer.set_block_outline_color": "设置瞄准方块轮廓线的颜色\n默认Alpha为0.4\n可能与着色器不兼容",
    "figura.docs.renderer.get_block_outline_color": "返回瞄准方块轮廓线的颜色\n默认为nil",
    "figura.docs.renderer.set_root_rotation_allowed": "设置模型是否可以有根旋转\n默认为true",
    "figura.docs.renderer.get_root_rotation_allowed": "获取模型是否可以有根旋转",
    "figura.docs.world.raycast_entity": "对世界中的实体进行射线投射，返回包含实体的表以及它的坐标",
    "figura.docs.world.raycast_block": "对世界中的方块进行射线投射，返回包含方块的表和它的坐标",
    "figura.docs.render_task.set_scale": "设置该任务的缩放，相对于它依附的部件",
    "figura.docs.render_task.get_position_matrix": "基于它当前的位置、旋转、缩放和枢轴点，重新计算该渲染任务的矩阵，并返回该矩阵",
    "figura.docs.matrices.mat2": "以给定向量为列创建二维矩阵\n如果你不带参数调用该函数，则返回二维单位矩阵",
    "figura.docs.matrices.mat3": "以给定向量为列创建三维矩阵\n如果你不带参数调用该函数，则返回三位单位矩阵",
    "figura.docs.matrices.mat4": "以给定向量为列创建四维矩阵\n如果你不带参数调用该函数，则返回四维单位矩阵",
    "figura.docs.matrices.rotation2": "创建一个旋转给定角度的Matrix2\n角以角度为单位",
    "figura.docs.matrices.rotation3": "创建一个旋转给定角度的Matrix3\n角以角度为单位，旋转顺序是ZYX",
    "figura.docs.matrices.x_rotation3": "创建一个绕X轴旋转给定角度的Matrix3\n角以角度为单位",
    "figura.docs.matrices.y_rotation3": "创建一个绕Y轴旋转给定角度的Matrix3\n角以角度为单位",
    "figura.docs.matrices.z_rotation3": "创建一个绕Z轴旋转给定角度的Matrix3\n角以角度为单位",
    "figura.docs.matrices.rotation4": "创建一个旋转给定角度的Matrix4\n角以角度为单位，旋转顺序是ZYX",
    "figura.docs.matrices.x_rotation4": "创建一个绕X轴旋转给定角度的Matrix4\n角以角度为单位",
    "figura.docs.matrices.y_rotation4": "创建一个绕Y轴旋转给定角度的Matrix4\n角以角度为单位",
    "figura.docs.matrices.z_rotation4": "创建一个绕Z轴旋转给定角度的Matrix4\n角以角度为单位",
    "figura.docs.matrices.scale2": "创建一个按给定系数缩放的Matrix2",
    "figura.docs.matrices.scale3": "创建一个按给定系数缩放的Matrix3",
    "figura.docs.matrices.scale4": "创建一个按给定系数缩放的Matrix4",
    "figura.docs.matrices.translate4": "创建一个以特定偏移量平移的Matrix4",
    "figura.docs.matrices.translate3": "创建一个以特定偏移量平移的Matrix3",
    "figura.docs.matrix3": "一个三行三列的矩阵",
    "figura.docs.matrix4": "一个四行四列的矩阵",
    "figura.docs.matrix_n.copy": "创建并返回该矩阵的副本",
    "figura.docs.matrix_n.get_column": "以向量形式获取该矩阵的给定列\n索引从1开始",
    "figura.docs.matrix_n.get_row": "以向量形式获取该矩阵的给定行\n索引从1开始",
    "figura.docs.matrix_n.set": "将该矩阵设置为传入的矩阵\n返回自身以链式调用",
    "figura.docs.matrix_n.multiply": "将该矩阵与另一个矩阵相乘，另一个矩阵在左\n返回自身以链式调用",
    "figura.docs.matrix_n.right_multiply": "将该矩阵与另一个矩阵相乘，另一个矩阵在右\n返回自身以链式调用",
    "figura.docs.matrix_n.transpose": "转置该矩阵，改变内部的值\n转置意味着交换矩阵的行和列\n返回自身以链式调用",
    "figura.docs.matrix_n.transposed": "返回该矩阵转置后的副本\n转置意味着交换矩阵的行和列",
    "figura.docs.matrix_n.invert": "将该矩阵变为原矩阵的逆矩阵\n返回自身以链式调用",
    "figura.docs.matrix_n.inverted": "返回该矩阵的逆矩阵副本",
    "figura.docs.matrix_n.det": "计算并返回该矩阵的行列式",
    "figura.docs.matrix_n.reset": "将该矩阵重置为单位矩阵\n返回自身以链式调用",
    "figura.docs.matrix_n.add": "与另一个矩阵相加\n返回自身以链式调用",
    "figura.docs.matrix_n.sub": "从该矩阵中减去另一个矩阵\n返回自身以链式调用",
    "figura.docs.matrix_n.scale": "按给定值缩放该矩阵的各个行，改变矩阵内部的值\n返回自身以链式调用",
    "figura.docs.matrix_n.translate": "以特定的量平移该矩阵，改变内部的值\n返回自身以链式调用",
    "figura.docs.matrix_n.rotate_x": "将矩阵绕X轴旋转指定的角度\n返回自身以链式调用",
    "figura.docs.matrix_n.rotate_y": "将矩阵绕Y轴旋转指定的角度\n返回自身以链式调用",
    "figura.docs.matrix_n.rotate_z": "将矩阵绕Z轴旋转指定的角度\n返回自身以链式调用",
    "figura.docs.matrix_n.rotate": "以给定角度渲染该矩阵，改变矩阵内部的值\n角以角度为单位\n返回自身以链式调用",
    "figura.docs.matrix_n.deaugmented": "缩减（Deaugment）该矩阵，移除一行一列",
    "figura.docs.matrix_n.augmented": "增广（Augment）该矩阵，增加一行一列\n新增部分沿对角线处为1，其余为0",
    "figura.docs.matrix_n.apply": "将给定值视为向量，以1增广（Augment）该向量，再将该向量与矩阵相乘，返回缩减（Deaugment）后的向量",
    "figura.docs.matrix_n.apply_dir": "将给定值视为向量，以0增广（Augment）该向量，再将该向量与矩阵相乘，返回缩减（Deaugment）后的向量",
    "figura.docs.model_part": "表示模型树中的一个节点，基本上是Blockbench中的一个组/块/网格\n每一个`.bbmodel`文件本身都是一个`ModelPart`，所有模型都被包含在一个叫`models`的全局`ModelPart`中",
    "figura.docs.model_part.pre_render": "该部件开始渲染前运行的函数",
    "figura.docs.model_part.mid_render": "该部件渲染过程中运行的函数，在其矩阵计算完后",
    "figura.docs.model_part.post_render": "该部件及其子部件渲染完毕后运行的函数",
    "figura.docs.model_part.set_pre_render": "设置该部件开始渲染前运行的函数",
    "figura.docs.model_part.set_mid_render": "设置该部件渲染过程中运行的函数，在其矩阵计算完后",
    "figura.docs.model_part.set_post_render": "设置该部件及其子部件渲染完毕后运行的函数",
    "figura.docs.model_part.get_name": "获取该部件的名称",
    "figura.docs.model_part.get_parent": "获取该部件的父部件\n如果该部件没有父部件，则返回nil",
    "figura.docs.model_part.get_children": "获取该部件的子部件，以表的形式存储",
    "figura.docs.model_part.is_child_of": "检查该部件是否为给定部件的子部件",
    "figura.docs.model_part.get_pos": "获取该部件的位置，其为相对于Blockbench中原始位置的偏移量\n仅在调用`setPos`后才会从默认的{0,0,0}发生改变",
    "figura.docs.model_part.set_pos": "设置该部件相对于Blockbench中原始位置的偏移量\nnil被视为0",
    "figura.docs.model_part.get_anim_pos": "获取该部件当前由动画提供的位置偏移量",
    "figura.docs.model_part.get_true_pos": "获取该部件的真实位置，其为位置偏移量和动画位置偏移量的加和",
    "figura.docs.model_part.get_rot": "获取该部件的旋转，包括在Blockbench中的旋转\n对于相对旋转值，另见`getOffsetRot`函数",
    "figura.docs.model_part.set_rot": "设置该部件的绝对旋转\nnil被视为0\n角以角度为单位\n对于相对旋转值，另见`setOffsetRot`函数",
    "figura.docs.model_part.get_offset_rot": "获取该部件的旋转偏移量，其为相对于Blockbench中原始旋转的偏移量\n对于绝对旋转值，另见`getRot`函数",
    "figura.docs.model_part.set_offset_rot": "设置该部件的旋转偏移量\nnil被视为0\n角以角度为单位\n对于绝对旋转值，另见`setRot`函数",
    "figura.docs.model_part.get_anim_rot": "获取该部件当前由动画提供的旋转偏移量",
    "figura.docs.model_part.get_true_rot": "获取该部件的真实旋转，其为原始旋转、旋转偏移量和动画旋转偏移量的加和",
    "figura.docs.model_part.get_scale": "获取该部件的缩放，即对其Blockbench中尺寸的乘数\n仅在调用`setScale`后才会从默认的{1,1,1}发生改变",
    "figura.docs.model_part.set_scale": "设置该部件的缩放\nnil被视为1",
    "figura.docs.model_part.get_offset_scale": "获取该部件的缩放偏移量，相对于默认缩放的偏移量\n对于绝对缩放值，另见`getScale`",
    "figura.docs.model_part.set_offset_scale": "设置该部件的缩放偏移量\nnil被视为1\n对于绝对缩放值，另见`setScale`",
    "figura.docs.model_part.get_anim_scale": "获取该部件由动画提供的缩放乘数",
    "figura.docs.model_part.get_true_scale": "获取该部件真实的缩放，其为原始缩放、缩放偏移量、动画缩放乘数的加和",
    "figura.docs.model_part.get_pivot": "获取该部件的枢轴点，包括其在Blockbench中的枢轴点\n对于相对枢轴点，另见`getOffsetPivot`",
    "figura.docs.model_part.set_pivot": "设置该部件的绝对枢轴点\nnil被视为0\n对于相对枢轴点，另见`setOffsetPivot`",
    "figura.docs.model_part.get_offset_pivot": "获取该部件枢轴点偏移量，对于其Blockbenc中枢轴点的偏移\n对于绝对枢轴点，另见`getPivot`",
    "figura.docs.model_part.set_offset_pivot": "设置该部件枢轴点偏移量\nnil被视为0\n对于绝对枢轴点，另见`setPivot`",
    "figura.docs.model_part.get_true_pivot": "获取该部件的真实枢轴点，其为原始枢轴点和枢轴点偏移量的加和",
    "figura.docs.model_part.get_position_matrix": "基于其当前的位置、旋转、缩放和枢轴点，重新计算该部件的位置矩阵，并返回该矩阵",
    "figura.docs.model_part.get_position_matrix_raw": "返回该部件的位置矩阵\n原始版本（Raw）的区别在于它在获取前不会重新计算该矩阵",
    "figura.docs.model_part.get_normal_matrix": "基于其当前的位置、旋转、缩放和枢轴点，重新计算该部件的法线矩阵，并返回该矩阵",
    "figura.docs.model_part.get_normal_matrix_raw": "返回该部件的法线矩阵\\n原始版本（Raw）的区别在于它在获取前不会重新计算该矩阵",
    "figura.docs.model_part.set_matrix": "将给定矩阵设置为该部件的位置矩阵\n法线矩阵自动计算为该矩阵的逆转置\n调用该函数不会改变该部件的位置、旋转或缩放\n如果你调用`setPos`或类似的函数，`setMatirx`的效果会被覆盖",
    "figura.docs.model_part.get_primary_render_type": "获取该部件的主渲染类型\n默认为nil，意味着该部件复制其父部件的主渲染类型",
    "figura.docs.model_part.get_secondary_render_type": "获取该部件的次渲染类型\n默认为nil，意味着该部件复制其父部件的次渲染类型",
    "figura.docs.model_part.set_primary_render_type": "设置该部件的主渲染类型\n默认为nil，意味着该部件复制其父部件的主渲染类型\n另见枚举中的`render_types`",
    "figura.docs.model_part.set_secondary_render_type": "设置该部件的次渲染类型\n默认为nil，意味着该部件复制其父部件的次渲染类型\n另见枚举中的`render_types`",
    "figura.docs.model_part.get_primary_texture": "获取该部件的主纹理\n返回两个值，第一个是纹理类型，第二个是值",
    "figura.docs.model_part.get_primary_defined_textures": "获取给定内部索引ID下的纹理\n（原文描述与实际效果完全不符，参考实际效果描述）",
    "figura.docs.model_part.set_primary_texture": "设置该部件的主纹理\n另见枚举中的`texture_types`\n如果使用`resource`，第二个参数应该表示你想使用的Minecraft纹理的路径\n如果使用`custom`，第二个参数应该是一个纹理对象",
    "figura.docs.model_part.get_secondary_texture": "获取该部件的次纹理\n返回两个值，第一个是纹理类型，第二个是值",
    "figura.docs.model_part.get_secondary_defined_textures": "获取给定内部索引ID下的纹理\n（原文描述与实际效果完全不符，参考实际效果描述）",
    "figura.docs.model_part.set_secondary_texture": "设置该部件的次纹理\n另见枚举中的`texture_types`\n如果使用`resource`，第二个参数应该表示你想使用的Minecraft纹理的路径\n如果使用`custom`，第二个参数应该是一个纹理对象",
    "figura.docs.model_part.get_textures": "返回包含该部件使用的所有纹理的表\n不包括子部件的纹理，所以组通常返回一个空表",
    "figura.docs.model_part.part_to_world_matrix": "获取将部件坐标变换为世界坐标的矩阵\n建议在`POST_RENDER`中使用，因为此时矩阵已经更新\n渲染时，它会比该部件的视觉位置慢一帧\n如果该部件没有在世界中被渲染，该部件的位置矩阵也不会更新\n纸娃娃或其他UI中的渲染不会影响该矩阵",
    "figura.docs.model_part.get_texture_size": "以像素为单位获取该部件纹理的宽度和高度\n如果该部件上有多个不同大小的纹理，或者该部件是一个组，则会抛出错误",
    "figura.docs.model_part.set_uv": "设置该部件的UV\n该函数是标准化的，意味着它适用于[0,1]的值\n比如说`setUV(0.5, 0.25)`，它会从左上角向右扫过纹理宽度的一半，向下扫过纹理高度的四分之一",
    "figura.docs.model_part.get_uv": "获取该部件的UV\n该函数是标准化的，意味着它适用于[0,1]的值",
    "figura.docs.model_part.set_uv_pixels": "以像素为单位设置该部件的UV\n自动除以`getTextureSize`的结果，所以你可以直接输入UV覆盖的像素数\n如果该部件有多个不同尺寸的纹理则报错\n如果该部件是一个组，它会尝试在它的子部件上调用`setUVPixels`",
    "figura.docs.model_part.get_uv_pixels": "以像素为单位获取该部件的UV\n自动乘以`getTextureSize`的结果\n如果该部件有多个不同尺寸的纹理或者该部件是一个组则报错",
    "figura.docs.model_part.set_uv_matrix": "设置该部件的UV矩阵\n该矩阵在变换时应用到每一个UV点上，UV被视为齐次向量\n`setUV`和`setUVPixels`只是设置该矩阵的更简单的方法",
    "figura.docs.model_part.get_uv_matrix": "获取该部件的UV矩阵",
    "figura.docs.model_part.set_primary_color": "设置该部件的主颜色乘数\n值为0到1的RGB",
    "figura.docs.model_part.set_color": "设置该部件主纹理和次纹理的颜色乘数\n值为0到1的RGB",
    "figura.docs.model_part.get_color": "返回该部件颜色乘数的平均值，将主颜色乘数与次颜色乘数相加再除以二\n值为0到1的RGB",
    "figura.docs.model_part.get_primary_color": "获取该部件的主颜色乘数\n值为0到1的RGB",
    "figura.docs.model_part.set_secondary_color": "设置该部件的次颜色乘数\n值为0到1的RGB",
    "figura.docs.model_part.get_secondary_color": "获取该部件的次颜色乘数\n值为0到1的RGB",
    "figura.docs.model_part.set_opacity": "设置该部件的不透明度乘数\n请注意，不透明度设置只有在部件有合适的渲染类型（主要是`TRANSLUCENT`）时才会生效\n查看`setPrimaryRenderType`以了解如何这么做",
    "figura.docs.model_part.get_opacity": "获取该部件的不透明度乘数\n请注意，不透明度设置只有在部件有合适的渲染类型（主要是`TRANSLUCENT`）时才会生效\n查看`setPrimaryRenderType`以了解如何这么做",
    "figura.docs.model_part.set_light": "设置渲染该部件时所用的光照等级\n值为0到15，表示方块光照等级和天空光照等级\n传入nil会重置该部件的光照等级覆盖",
    "figura.docs.model_part.get_light": "获取渲染该部件时所用的光照等级（你之前所设置的）\n不与Minecraft的光照系统交互，仅检索之前使用`setLight()`设置的值",
    "figura.docs.model_part.set_overlay": "设置渲染该部件时所用的叠加层颜色\n值为0到15，表示白色叠加层和受伤叠加层\n传入nil会重置该部件的叠加层",
    "figura.docs.model_part.get_overlay": "获取渲染该部件时所用的叠加层颜色（你之前所设置的）\n不与Minecraft的叠加层系统交互，仅检索之间使用`setOverlay`设置的值",
    "figura.docs.model_part.set_parent_type": "设置该部件的父类型（Parent Type）\n另见枚举中的`parent_types`",
    "figura.docs.model_part.get_parent_type": "返回该部件的父类型",
    "figura.docs.model_part.get_type": "返回该部件是一个`GROUP`（组）、`CUBE`（块）还是`MESH`（网格）",
    "figura.docs.model_part.override_vanilla_rot": "返回该部件原本的旋转是否被动画覆盖",
    "figura.docs.model_part.override_vanilla_pos": "返回该部件原本的位置是否被动画覆盖",
    "figura.docs.model_part.override_vanilla_scale": "返回该部件原本的缩放是否被动画覆盖",
    "figura.docs.model_part.new_item": "在该部件上添加一个物品渲染任务（Item Render Task）",
    "figura.docs.model_part.new_block": "在该部件上添加一个方块渲染任务（Block Render Task）",
    "figura.docs.model_part.new_sprite": "在该部件上添加一个精灵图渲染任务（Sprite Render Task）",
    "figura.docs.model_part.new_entity": "在该部件上添加一个实体渲染任务（Entity Render Task）",
    "figura.docs.model_part.add_task": "将给定的渲染任务添加到该部件上",
    "figura.docs.model_part.get_task": "从该部件中获取给定名称的任务\n如果不给定名称则返回包含所有任务的表",
    "figura.docs.model_part.remove_task": "从该部件中移除给定名称的任务\n如果不给定名称则移除所有任务",
    "figura.docs.model_part.remove": "移除该部件",
    "figura.docs.model_part.get_vertices": "返回给定纹理ID在模型中的所有顶点的表\n如果未找到顶点则返回nil\n（一个块有六个面，每个面有四个顶点，所以结果总共包含24个顶点）",
    "figura.docs.model_part.copy": "返回该部件的副本，并复制所有自定义设置和顶点\nChildren parts are passed as reference, in a new list",
    "figura.docs.model_part.new_part": "在同一个枢轴点处创建一个空组作为该部件的子部件\n接受两个参数，该组的名称，以及可选的父类型（Parent Type）",
    "figura.docs.render_task.remove": "从父模型部件移除该渲染任务",
    "figura.docs.render_task.get_name": "获取该任务的名称",
    "figura.docs.render_task.is_visible": "检查该任务是否可见",
    "figura.docs.render_task.set_visible": "设置该任务是否应被渲染",
    "figura.docs.render_task.get_light": "返回该任务的光照等级覆盖值",
    "figura.docs.render_task.set_light": "设置该任务的光照等级覆盖值\n值为0到15，表示光照等级\n传入nil会重置该部件的光照等级覆盖",
    "figura.docs.render_task.get_overlay": "获取该任务的叠加层覆盖值",
    "figura.docs.render_task.set_overlay": "设置该任务的叠加层覆盖\n值为0到15，表示白色叠加层和受伤叠加层\n传入nil会重置该部件的叠加层",
    "figura.docs.render_task.get_pos": "获取该任务的位置",
    "figura.docs.render_task.set_pos": "设置该任务的位置，相对于它依附的部件\n使用模型坐标系",
    "figura.docs.render_task.get_rot": "获取该任务的旋转",
    "figura.docs.render_task.set_rot": "设置该任务的旋转，相对于它依附的部件",
    "figura.docs.render_task.get_scale": "获取该任务的缩放",
    "figura.docs.render_task.get_position_matrix_raw": "返回该渲染任务的位置矩阵\n原始版本（Raw）的区别在于它在获取前不会重新计算该矩阵",
    "figura.docs.render_task.get_normal_matrix": "基于其当前的位置、旋转、缩放和枢轴点，重新计算该渲染任务的法线矩阵，并返回该矩阵",
    "figura.docs.render_task.get_normal_matrix_raw": "返回该渲染任务的法线矩阵\n原始版本（Raw）的区别在于它在获取前不会重新计算该矩阵",
    "figura.docs.render_task.set_matrix": "将给定矩阵设置为该渲染任务的位置矩阵\n法线矩阵自动计算为该矩阵的逆转置\n调用该函数不会改变该渲染任务的位置、旋转或缩放\n如果你调用`setPos`或类似的函数，`setMatrix`的效果会被覆盖",
    "figura.docs.renderer.set_render_fire": "设置是否渲染着火效果",
    "figura.docs.renderer.should_render_vehicle": "检查你的载具是否应被渲染",
    "figura.docs.renderer.set_render_vehicle": "设置你的载具是否应被渲染",
    "figura.docs.renderer.should_render_crosshair": "检查你的十字准星是否应被渲染",
    "figura.docs.renderer.set_render_crosshair": "设置你的十字准星是否应被渲染",
    "figura.docs.renderer.should_force_paperdoll": "检查纸娃娃是否应被强制渲染",
    "figura.docs.renderer.set_force_paperdoll": "设置纸娃娃是否应被强制渲染",
    "figura.docs.renderer.should_render_hud": "检查原版HUD是否应被渲染",
    "figura.docs.renderer.set_render_hud": "设置原版HUD是否应被渲染",
    "figura.docs.renderer.is_upside_down": "检查该实体是否应被颠倒渲染",
    "figura.docs.renderer.set_upside_down": "设置该实体是否应被颠倒渲染",
    "figura.docs.renderer.set_shadow_radius": "设置阴影的半径\n默认值为nil，意味着其使用原版玩家的默认阴影范围0.5\n最大值为12",
    "figura.docs.renderer.get_shadow_radius": "获取阴影的半径",
    "figura.docs.renderer.is_first_person": "检查摄像机是否处于第一人称视角",
    "figura.docs.renderer.is_camera_backwards": "检查摄像机是否处于第三人称背面视角",
    "figura.docs.renderer.get_camera_pos": "获取摄像机的位置偏移量",
    "figura.docs.renderer.set_camera_pos": "设置摄像机的位置偏移量\nnil被视为0",
    "figura.docs.renderer.get_camera_pivot": "获取摄像机的绝对枢轴点",
    "figura.docs.renderer.set_camera_pivot": "设置摄像机的绝对枢轴点\n枢轴点也会移动摄像机\n该值相对于世界\nnil被视为0\n对于相对枢轴点，另见`setCameraOffsetPivot`",
    "figura.docs.renderer.get_camera_offset_pivot": "获取摄像机的枢轴点偏移量",
    "figura.docs.renderer.set_offset_camera_pivot": "设置摄像机的枢轴点偏移量\n枢轴点也会移动摄像机\n该值相对于世界\nnil被视为0\n对于绝对枢轴点，另见`setCameraPivot`",
    "figura.docs.renderer.get_camera_rot": "获取相机的绝对旋转",
    "figura.docs.renderer.set_camera_rot": "设置相机的绝对旋转\n旋转时不考虑位置\nnil被视为0\n对于相对值，另见`setOffsetCameraRot`",
    "figura.docs.renderer.set_post_effect": "设置后处理着色器\n与“超级秘密设置”相同",
    "figura.docs.renderer.get_camera_offset_rot": "获取摄像机的旋转偏移量",
    "figura.docs.renderer.set_offset_camera_rot": "设置摄像机的旋转偏移量\nnil被视为0\n角以角度为单位\n对于绝对值，另见`setCameraRot`",
    "figura.docs.renderer.get_camera_matrix": "返回修改过的摄像机矩阵",
    "figura.docs.renderer.set_camera_matrix": "将摄像机矩阵设置为给定矩阵",
    "figura.docs.renderer.get_camera_normal": "返回修改过的摄像机法线矩阵",
    "figura.docs.renderer.set_camera_normal": "将摄像机法线矩阵设置为给定矩阵",
    "figura.docs.renderer.get_fov": "获取FOV（视场角）的乘数",
    "figura.docs.renderer.set_fov": "设置FOV（视场角）的乘数\n默认值为nil，意味着不会对你的FOV进行更改",
    "figura.docs.renderer.get_crosshair_offset": "获取十字准星的偏移量",
    "figura.docs.renderer.set_crosshair_offset": "设置十字准星的偏移量",
    "figura.docs.renderer.get_outline_color": "获取发光药水效果的轮廓颜色",
    "figura.docs.renderer.set_outline_color": "设置发光药水效果的轮廓颜色",
    "figura.docs.renderer.get_primary_fire_texture": "获取自定义主火焰纹理\n（原版中，着火效果是由两个火焰纹理构成的伪3D，分别为“fire_0”和“fire_1”）",
    "figura.docs.renderer.get_secondary_fire_texture": "获取自定义次火焰纹理\n（原版中，着火效果是由两个火焰纹理构成的伪3D，分别为“fire_0”和“fire_1”）",
    "figura.docs.renderer.set_primary_fire_texture": "设置自定义主火焰纹理，实体着火时渲染\n着火效果由两种纹理交替排列构成\n次纹理用于第一人称的着火效果\n缺失次纹理时使用主纹理",
    "figura.docs.renderer.set_secondary_fire_texture": "设置自定义次火焰纹理，实体着火时渲染\n着火效果由两种纹理交替排列构成\n次纹理用于第一人称的着火效果\n缺失次纹理时使用主纹理",
    "figura.docs.renderer.set_render_left_arm": "设置是否在第一人称时渲染左臂，无论你是否手持物品",
    "figura.docs.renderer.get_render_left_arm": "获取是否在第一人称时渲染左臂",
    "figura.docs.renderer.set_render_right_arm": "设置是否在第一人称时渲染右臂，无论你是否手持物品",
    "figura.docs.animations.get_playing": "返回所有正在播放的动画的表",
    "figura.docs.matrix2": "一个二行二列的矩阵",
    "figura.config.format_script.4": "AST",
    "figura.config.action_wheel_mode.4.tooltip": "与“切换”选项一样，但在轮盘关闭时执行选中的动作",
    "figura.config.action_wheel_title.7": "边缘",
    "figura.command.export_texture.success": "已导出纹理至Figura文件夹",
    "figura.config.networking_logging.4": "无",
    "figura.command.export_texture.error": "导出纹理失败！",
    "figura.config.nameplate_level.2.tooltip": "允许自定义脚本",
    "figura.config.action_wheel_mode.3.tooltip": "与“按住”选项一样，但在轮盘关闭时执行选中的动作",
    "figura.config.networking_restriction.3": "无",
    "figura.config.iris_compatibility_fix.2": "偏移",
    "figura.command.export_avatar.error": "导出模型失败！",
    "figura.command.export_avatar.success": "已导出模型至Figura文件夹",
    "figura.config.action_wheel_title.6": "图标",
    "figura.config.log_location.1.tooltip": "游戏内聊天（聊天信息也会打印到日志中）",
    "figura.config.render_debug_parts_pivot.1.tooltip": "不渲染枢轴点",
    "figura.config.render_debug_parts_pivot.2.tooltip": "只渲染主机Avatar的枢轴点",
    "figura.config.render_debug_parts_pivot.3.tooltip": "渲染所有Avatar的枢轴点",
    "figura.config.action_wheel_title.2.tooltip": "在鼠标指针旁渲染文本",
    "figura.config.action_wheel_title.3.tooltip": "在轮盘顶上渲染文本",
    "figura.config.action_wheel_title.4.tooltip": "在轮盘中间渲染文本",
    "figura.config.action_wheel_title.5.tooltip": "在轮盘底部渲染文本",
    "figura.config.action_wheel_title.6.tooltip": "在所有Action图标下方渲染文本",
    "figura.config.action_wheel_title.7.tooltip": "在轮盘两侧渲染所有Action的文本",
    "figura.config.action_wheel_slots_indicator": "槽位指示文本",
    "figura.command.no_script_error": "装备的Avatar没有正常运行的脚本！",
    "figura.command.no_avatar_error": "没有装备Avatar！",
    "figura.config.action_wheel_title.1.tooltip": "和Figura的提示框一样"
}
